openapi: 3.0.0
servers:
  - description: Media Management System on cloud (<b>Public MMS platform, it can be used by anyone</b>)
    url: https://mms-api.cloud-mms.com/catramms/1.0.1
  - description: Media Management System used by CiborTV/SerieC (<b>Private MMS platform, no registration is allowed</b>)
    url: https://mms-api.restream.ovh/catramms/1.0.1
info:
  description: Media Management System REST API
  version: 1.0.1
  title: Media Management Service REST API
  contact:
    email: mms-technical-support@cloud-mms.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: MMS User
    description: <ul><li>The steps to create a new User are<ol><li>register a new User (POST /user)<li>confirm the registration of the User (PUT /user/{userKey}/{confirmationCode})</ol><li>When a User is created, a new Workspace  (see next section) is also automatically created and associated to the User<li>The registration and confirmation APIs can be called without any authorization and they will provide you a userKey and an apiKey<li>The apiKey is an alphanumeric string associated to the couple User-Workspace<li>Use the userKey as username and the apikey as password to set the Basic Authorization (Authorize button) and call any other APIs</ul>
  - name: Workspace
    description: <img src="https://github.com/giulianoc/CatraMMS/raw/master/docs/User-Workspace.png" alt="User Workspace"><ul><li>A Workspace is the repository where all the media items, videos audios and images are saved<li>A User can create more Workspaces to have a logical separation of the media items<li>A User will have one apiKey for each Workspace<li>The apiKey is used as password into the authorization, so every API acts on one Workspace specified by the apiKey/authorization<li>A Workspace can also be shared with another User, so both are able to work with the same media items</ul>
  - name: mediaItems
    description: <ul><li>A media item<ul><li>can be a video, an audio or an image<li>can have any number of variants (multi bit rate, multi resolutions, ...)<li>can have one number of tags<li>can be published based on the startPublishing and endPublishing metadata<li>can have any custom metadata using a json format<li>has a retention and. if expired, is automatically removed<li>can have a reference to another media item. For example a video can have a reference 'CutOfVideo' towards the original video used for the cut. The actual Cross Reference Types are<ul><li>ImageOfVideo<li>VideoOfImage<li>ImageOfAudio<li>AudioOfImage<li>FaceOfVideo<li>CutOfVideo<li>CutOfAudio</ul></ul>
  - name: delivery
    description: <ul><li>A media item or a live content can be delivered only if it is authorized<li>The APIs in this section allow you to create an authorization for the specified media items and provides you a 'tokenized' URL for the delivery</ul>
  - name: workflow
    description: <img src="https://github.com/giulianoc/CatraMMS/raw/master/docs/WorkflowEditor.png" alt="Workflow Editor"><ul><li>A workflow is a sequence of Tasks involved in moving from the beginning to the end of a working process<li>A Task inherits by default as input the output of his parent. For example, if we have a Concat task and, on success, the Encode task, the Encode Task will inherit authomatically the 'concatenated' media item  output of his parent Concat Task<li>A Task can be executed based on the status of his parent Task. Possible status are<ul><li>onSuccess<li>onFailure<li>onComplete</ul><li>Here follows the Tasks defined by the MMS platform in alphabetical order<ul><li><b>Add-Content</b>, it adds a new content into the MMS Workspace. It supports two options<ul><li><b>pull</b>, the binary of the content is downloaded by the MMS through a url provided by the User. Protocols supported are http, https, ftp, ftps<li><b>push</b>, the binary of the content is uploaded calling the appropriate API</ul><li><b>Awaiting-The-Beginning</b>, it generates a live video based on a Picture provided as input and showes the picture with a countdown up to the beginning of the event. The live video can be delivered to a CDN or through a live HLS format<li><b>Change-File-Format</b>, it generates a new media item having the new format. No re-encoding is done, just change the format/container<li><b>Check-Streaming</b>, it verifies if the streaming specified by a URL provided as input is working<li><b>Concat-Demuxer</b>, it generates a new media item as concatenation of videos having same codecs<li><b>Cut</b>, it generates a new media item as cut of a video-audio<li><b>Encode</b>, it generates one or more new variants of an existing media item using a profile or set of profiles provided as input<li><b>Extract-Tracks</b>, it generates a new media item with the extraction of tracks of a media item provided as input<li><b>Email-Notification</b>, it sends an email<li><b>Face-Identification</b>, it generates a new video (an avi video using h264 as codec without audio) that it is a copy of the provided input video where all the faces are highlighted with a circle or a rectangle having the name of the identified face. it receives a list of tags to be used as filter to select images inside the MMS to be used to train the deep learned model to identify the face inside a video<li><b>Face-Recognition</b>, it receives a video as input and generates, depending on the Output parameter<ul><li>another video (an avi video using h264 as codec without audio) that it is a copy of the input video where all the faces are highlighed with a circle or a rectangle<li>an image for each face met inside the input video. All these ingested images could be used to train the deep learned model to identify (so not just recognize) the face inside a video. In this scenario, it is possible to tag all the images ingested and use them in the FaceIdentification Task to identify the faces</ul><li><b>Frame</b>, it generates a jpg image that it is a Frame from a video<li><b>FTP-Delivery</b>, it uploads the media item on a ftp site<li><b>GroupOfTasks</b>, it is a special Task used when the Workflow has to execute a list of Tasks in parallel or sequentially<li><b>HTTP-Callback</b>, it calls an HTTP, any HTTP method, defined by the Task parameters<li><b>I-Frames</b>, it generates all the I-Frames of a video and add them into MMS<li><b>Intro-Outro-Overlay</b>, it generates a video that is the composition of the intro, main and outro videos<img src="https://github.com/giulianoc/CatraMMS/raw/master/docs/TASK_39_Intro_Outro_Overlay.png" alt="Intro_Outro_Overlay"/><ul><li>The last part of the intro video is overlayed with the initial part of the main video<li>The initial part of the outro video is overlayed with the last part of the main video<li>Generally the intro and outro videos have an alpha component (transparency) that is used during the overlay. This is used to implement a 'transition' from the intro video to the main video and from the main video to the outro video<li>The intro and outro videos may contain an alpha component to be transparent during the overlay with the main video<li>This task will mute (default behavior) the audio of the intro and outro videos during the overlay</ul><li><b>Live-Cut</b>, it generates a video as a cut from a live feed. In order to make the Live-Cut working fine, it is supposed that a Live-Recorder task is or has been active on the same live feed. Internally, the Live-Cut Task generates a new Workflow to concatenate all the chunks needed and then performs a cut generating a new Media Item<li><b>Live-Grid</b>, it receives a list of live streaming as input and generates one live content as output that it is a composition of the input live streaming. The new output live streaming can be delivered using the HLS protocol<li><b>Live-Proxy</b>, it gets a live feed as input and proxy it to a CDN or generates a live content that is able to be delivered as an HLS format<li><b>Live-Recorder</b>, it records a live feed and generates periodically chunks (media items) of a specified duration (i.e. 60 seconds). The same feed can be provided as output to several destination<li><b>Local-Copy</b>, it is used for custom use cases<li><b>Media-Cross-Reference</b>, it generates a cross reference between two media items. It is a kind of link between two media items. For example, a link could be 'imageOfVideo' to join a video and his image/thumbnail. The Cross Reference allows you to navigate from one video to another<li><b>Motion-JPEG-by-I-Frames</b>, it generates a Motion JPEG video by the I-Frames of the video<li><b>Motion-JPEG-by-Periodical-Frames</b>, it generates a Motion JPEG video by periodical Frames of the video<li><b>Overlay-Image-On-Video</b>, it generates a video overlaying an Image on top of a video both provided as input<li><b>Overlay-Text-On-Video</b>, it generates a video overlaying a text on top of a video both provided as input<li><b>Periodical-Frames</b>, it generates periodical frames from a video provided as input<li><b>Picture-In-Picture</b>, it generates a video overlaing a video on another video both received as input<li><b>Post-On-Facebook</b>, it Post a media item on Facebook<li><b>Post-On-YouTube</b>, it Post a media item on YouTube<li><b>Remove-Content</b>, it removes one or more media items from MMS<li><b>Slideshow</b>, it generates a Slideshow video (mp4 file) using images media items provided as input<li><b>Video-Speed</b>, it generates a new video speeding up or slowing down a provided input video<li><b>VOD-Proxy</b>, it generates a live content starting from one or more VODs media items. The live content can be proxied to a CDN or delivered it through a live HLS delivery<li><b>YouTube-Live-Broadcast</b>, it creates a live event on YouTube feeding it with a live feed or a VOD sent continuously (loop)</ul></ul>
  - name: encoding
    description: <ul><li>An EncodingJob is an activity that has to be done by the Encoder, i.e. an encoding of a video or the generation of a SlideShow video, ...<li>Each EncodingJob has a Priority field used to determine the execution order<li>Next APIs will allow you<ul><li>to know all the running EncodingJobs based on all the Encoders or on a specific Encoder<li>to know the EncodingJobs that are in the queue waiting a free Encoder to be executed<li>to kill a running EncodingJob<li>to cancel an EncodingJob from the queue<li>to change the Priority of an EncodingJob<li>to execute again the encoding</ul></ul>
  - name: workflowAsLibrary
    description: <ul><li>A 'Workflow As Library' is a Workflow that is registered into MMS and can be used as an Elementary Task in another Workflow<li>Let s explain it doing an example<ul><li>assume we have a Workflow retrieving the best Picture from a video<li>this workflow is composed by several Tasks<ul><li>a Task looking for Faces into the Video<li>if it does not find any face (OnError event), there is another Task getting a Picture at a specified instance (i.e. 30 seconds since the starting of the Video)<li>then we have the encoding of the Picture<li>and so on</ul><li>let s call this Workflow as 'Best Picture Of a Video'<li>now, let s assume we have another Workflow registering a live feed and generating a chunk (video media item) every 60 seconds<li>we want to have a picture for every chunk generated during the registration<li>to achieve this, we will register the 'Best Picture Of a Video' Workflow into the MMS as 'Workflow As Library'<li>then we use it into the new Workflow as we usually do with any Elementary Task</ul>
  - name: encodingProfiles
    description: <ul><li>A media item (video, audio or image) can be encoded using one or more profiles<li>There are several Predefined Encoding Profiles defined by the MMS system, however a User can define new encoding profiles<li>It is possible to add a single encoding profile as well as a set of profiles and apply the entire set of profiles to one content using just one Task</ul>
  - name: channels
    description: <ul><li>A channel represents a live feed<li>A property of the channel is 'sourceType' that identifies the type of the channel<ul><li>IP_PULL, the live feed is retrieved by the MMS through a URL (srt, rtmp, http, ...). In this scenario MMS is a client and the host of the URL is a server<li>IP_PUSH, the live feed is pushed to the MMS that is listenning on a specified IP/Port. In this scenario MMS is a server and the host pushing the live feed is the client<li>CaptureLive, the MMS retrieve the live feed through a Capture device (capture card, HDMI, ...)<li>Satellite, the MMS retrieve the feed from the satellite</ul><li>A channel can have any custom metadata using a json format</ul>
  - name: social
    description: <ul><li>Social configuration contains the minimal data needed to MMS to post vod/live contents to YouTube or Facebook<li>The social configuration is used by the Post-On-Facebook, Post-On-YouTube and YouTube-Live-Broadcast Tasks</ul>
  - name: ftp
    description: <ul><li>FTP configuration contains FTP accounts details to allow MMS to copy a contents to an FTP server. For example, inside the Workflow, on success of an encoding, the encoded file has to be copied to an FTP server<li>The FTP configuration is used by the FTP-Delivery Task</ul>
  - name: email
    description: <ul><li>Email configuration contains email details to allow MMS to send email. For example, inside the Workflow, on failure of a Task you could send an email to inform the support team of this failure<li>The Email configuration is used by the Email-Notification Task</ul>
  - name: encoder
    description: <ul><li>This section contains APIs to add/remove encoders to the MMS platform and associate them to workspaces. Most of this APIs require the 'admin' priviledge<li>This section contains also encodersPool APIs, they are used to group encoders. These APIs do not need the 'admin' priviledge to be executed<li>The EncodersPool can be specified inside the Task and, in this case, the MMS will perform a balancing among all the encoders included into the EncodersPool</ul>
security: 
  - BasicAuth: []
paths:
  /user:
    post:
      security: []
      tags:
        - MMS User
      summary: register a new User
      operationId: registerUser
      description: This API registers a new User into the MMS platform
        and creates his default Workspace.
      responses:
        '201':
          description: User registered and Workspace created successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - userKey
                    - confirmationCode
                  properties:
                    userKey:
                      type: integer
                      format: int64
                      example: 123
                      description: please remember his value because it will be the 'user' of the HTTP basic authentication
                    confirmationCode:
                      type: string
                      description: please remember his value because it will be used to confirm the registration
        '400':
          description: 'Json field is not present or it is null'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        description: 'User for Registration details'
    put:
      tags:
        - MMS User
      summary: update of a User metadata
      operationId: updateUser
      description: This API updates the User metadata
      responses:
        '200':
          description: User updated successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        description: 'User fields to be updated'
  /user/{userKey}/{confirmationCode}:
    put:
      security: []
      tags:
        - MMS User
      summary: confirm the registration of the User
      operationId: confirmRegistration
      description: confirm the registration of the User
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: confirmationCode
          required: true
          schema:
            type: string
      responses:
        '201':
          description: it returns the api-key
          content:
            application/json:
              schema:
                type: object
                required:
                  - apiKey
                properties:
                  apiKey:
                    type: string
                    description: please remember his value because it will be the 'password' of the HTTP basic authentication
        '500':
          description: internal server error
  /login:
    post:
      security: []
      tags:
        - MMS User
      summary: receive email and password as input and return the apiKey in case the email and password are correct (used generally in case of a generic GUI client)
      operationId: login
      description: This API allows the User to login into the MMS platform.
        As input User and password, the output will be the api-key
        associated to the User default Workspace
      responses:
        '200':
          description: login done successful
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/UserAndWorkspace'
        '400':
          description: 'Json field is not present or it is null'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: anthony@companyName.com
                password:
                  type: string
                  example: k9wo39lksh
                remoteClientIPAddress:
                  type: string
                  description: in case this field is present, MMS register the client IP |
                    used by the User
                  example: 111.222.333.444
        description: 'User details'
  /status:
    get:
      security: []
      tags:
        - MMS User
      summary: status of the API service
      operationId: statusAPI
      description: Provide the status of the MMS API service
      responses:
        '200':
          description: API service is up and running
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - version-api
                properties:
                  status:
                    type: string
                  version-api:
                    type: string
        '500':
          description: API service is NOT up and running
  /support:
    post:
      tags:
        - MMS User
      summary: request for support
      operationId: mmsSupport
      description: in case of any issue/question about MMS, this API allows you to ask support to the MMS team
      responses:
        '201':
          description: support was submitted
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: wrong basic authentication
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Support'
        description: 'Support request details:'
  /workspace:
    get:
      tags:
        - Workspace
      summary: list all the Workspaces of the User, own and shared Workspaces
      operationId: workspaceList
      description: list all the Workspaces of a User, own and shared Workspaces
      responses:
        '200':
          description: list of all the Workspaces
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - workspaces
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        workspaces:
                          type: array
                          items:
                            $ref: '#/components/schemas/Workspace'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - Workspace
      summary: create a new Workspace
      operationId: registerWorkspace
      description: This API registers a new Workspace into the MMS platform. It can be executed only by a User having the createRemoveWorkspace or admin priviledge
      parameters:
        - in: query
          name: workspaceName
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Workspace created successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - userKey
                    - confirmationCode
                  properties:
                    userKey:
                      type: integer
                      format: int64
                      example: 123
                      description: please remember his value because it will be the 'user' of the HTTP basic authentication
                    confirmationCode:
                      type: string
                      description: please remember his value because it will be used to confirm the registration
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - workspaceName
                properties:
                  workspaceName:
                    type: string
                    example: news video
        description: 'Workspace details'
    put:
      tags:
        - Workspace
      summary: update of a Workspace metadata
      operationId: updateWorkspace
      description: This API updates the Workspace metadata. Only the owner of the Workspace or the admin are able to do the update. Here follows the list of the fields that can be updated<ul><li>workspaceName<li>isEnabled (only admin)<li>languageCode<li>maxStorageInMB (only admin)<li>maxEncodingPriority (only admin)<li>maxIngestionsNumber (only admin)<li>encodingPeriod (only admin)<li>expirationDate (only admin)<li>applicationRecorder<li>cancelIngestionJob<li>createProfiles<li>createRemoveWorkspace<li>deliveryAuthorization<li>editConfiguration<li>editEncodersPool<li>editMedia<li>ingestWorkflow<li>killEncoding<li>shareWorkspace</ul>
      responses:
        '200':
          description: Workspace updated successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
    delete:
      tags:
        - Workspace
      summary: delete the Workspace
      operationId: deleteWorkspace
      description: delete the Workspace identified by the apikey (http basic authentication password). If the owner will remain without any other Workspace, the User will be automatically removed too. It can be executed only by a User having the createRemoveWorkspace or admin priviledge.
      responses:
        '200':
          description: Workspace deleted successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /workspace-encoder/{workspaceKey}/{encoderKey}:
    post:
      tags:
        - encoder
      summary: associate the encoder to the Workspace
      operationId: workspaceEncoderAssociation
      description: This API associates the encoder to a Workspace. It can be executed only by a User having the admin priviledge
      parameters:
        - in: path
          name: workspaceKey
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: encoderKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: association Workspace-encoder created successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - workspaceKey
                    - encoderKey
                  properties:
                    workspaceKey:
                      type: integer
                      format: int64
                      example: 824
                    encoderKey:
                      type: integer
                      format: int64
                      example: 824
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    delete:
      tags:
        - encoder
      summary: delete the association Workspace-encoder
      operationId: deleteWorkspaceEncoder
      description: delete the association Workspace-encoder. It can be executed only by a User having the admin priviledge
      parameters:
        - in: path
          name: workspaceKey
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: encoderKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: association Workspace-encoder deleted successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - workspaceKey
                    - encoderKey
                  properties:
                    workspaceKey:
                      type: integer
                      format: int64
                      example: 824
                    encoderKey:
                      type: integer
                      format: int64
                      example: 824
        '401':
          description: 'wrong basic authentication'
        '403':
          description: 'APIKey does not have the admin permission'
        '500':
          description: 'internal server error'
  /workspace/share:
    put:
      tags:
        - Workspace
      summary: share the Workspace with another User
      operationId: shareWorkspace
      description: This API shares a Workspace with a User already present or a new User.  It can be executed only by a User having the shareWorkspace or admin priviledge.
      parameters:
        - in: query
          name: userAlreadyPresent
          required: true
          schema:
            type: boolean
        - in: query
          name: createRemoveWorkspace
          required: true
          schema:
            type: boolean
        - in: query
          name: ingestWorkflow
          required: true
          schema:
            type: boolean
        - in: query
          name: createProfiles
          required: true
          schema:
            type: boolean
        - in: query
          name: deliveryAuthorization
          required: true
          schema:
            type: boolean
        - in: query
          name: shareWorkspace
          required: true
          schema:
            type: boolean
        - in: query
          name: editMedia
          required: true
          schema:
            type: boolean
        - in: query
          name: editConfiguration
          required: true
          schema:
            type: boolean
        - in: query
          name: killEncoding
          required: true
          schema:
            type: boolean
        - in: query
          name: cancelIngestionJob
          required: true
          schema:
            type: boolean
        - in: query
          name: editEncodersPool
          required: true
          schema:
            type: boolean
        - in: query
          name: applicationRecorder
          required: true
          schema:
            type: boolean
      responses:
        '201':
          description: Workspace shared successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - userKey
                    - confirmationCode
                  properties:
                    userKey:
                      type: integer
                      format: int64
                      example: 123
                      description: please remember his value because it will be the 'user' of the HTTP basic authentication
                    confirmationCode:
                      type: string
                      description: please remember his value because it will be used to confirm the registration
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        description: Just the 'email' if userAlreadyPresent is true, all the fields but 'workspaceName' if userAlreadyPresent is false
  #/workspace/default/{workspaceKeyToBeSetAsDefault}:
    #put:
      #tags:
        #- Workspace
      #summary: set the default Workspace
      #operationId: workspaceDefault
      #description: This API set the Workspace specified by the path parameter as default. This is the Workspace used by the MMS platform once the User login into the system
      #parameters:
        #- in: path
          #name: workspaceKeyToBeSetAsDefault
          #required: true
          #schema:
            #type: integer
            #format: int64
      #responses:
        #'200':
          #description: default flag set successful
        #'401':
          #description: 'wrong basic authentication'
        #'500':
          #description: 'internal server error'
  /workspace/usage:
    get:
      tags:
        - Workspace
      summary: return the storage used by the Workspace
      operationId: workspaceUsage
      description: return the storage used by the Workspace
      responses:
        '200':
          description: storage usage calculated successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /encoder:
    get:
      tags:
        - encoder
      summary: list all the encoders associated to the Workspace
      operationId: encoderList
      description: return all the encoders associated to the Workspace (current api-key). Only in case of admin, it is possible to ask for all the encoders available into the MMS platform or the encoder for a specific Workspace (different from the one associated to the api-key)
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: label
          required: false
          schema:
            type: string
        - in: query
          name: serverName
          required: false
          schema:
            type: string
        - in: query
          name: port
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: labelOrder
          required: false
          description: asc or desc
          schema:
            type: string
        - in: query
          name: allEncoders
          required: false
          description: only in case of User with admin priviledge
          schema:
            type: boolean
        - in: query
          name: workspaceKey
          required: false
          description: only in case of User with admin priviledge
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of the encoders
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encoders
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        encoders:
                          type: array
                          items:
                            $ref: '#/components/schemas/Encoder'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - encoder
      summary: add a new encoder
      operationId: addEncoder
      description: This API adds a new encoder into the MMS platform. It can be executed only by a User having the admin priviledge.
      responses:
        '201':
          description: Workspace created successful
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Encoder'
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - EncoderKey
                properties:
                  EncoderKey:
                    type: integer
                    format: int64
        description: 'Encoder details'
  /encoder/{encoderKey}:
    get:
      tags:
        - encoder
      summary: get encoder details
      operationId: encoderDetails
      description: return the encoder details identified by the encoderKey parameter
      parameters:
        - in: path
          name: encoderKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encoder details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encoders
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        encoders:
                          type: array
                          items:
                            $ref: '#/components/schemas/Encoder'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - encoder
      summary: update of the Encoder metadata
      operationId: updateEncoder
      description: This API updates the Encoder metadata. It can be executed only by a User having the admin priviledge.
      parameters:
        - in: path
          name: encoderKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encoder updated successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - EncoderKey
                  properties:
                    EncoderKey:
                      type: integer
                      format: int64
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                  $ref: '#/components/schemas/Encoder'
        description: 'Encoder fields to be updated'
    delete:
      tags:
        - encoder
      summary: remove the Encoder
      operationId: deleteEncoder
      description: delete the Encoder identified by the encoderKey parameter. It can be executed 
        only by a User having the admin priviledge.
      parameters:
        - in: path
          name: encoderKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encoder deleted successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /encodersPool:
    get:
      tags:
        - encoder
      summary: list all the encodersPool associated to the Workspace
      operationId: encodersPoolList
      description: return all the encodersPool associated to the Workspace (current api-key).
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: label
          required: false
          schema:
            type: string
        - in: query
          name: labelOrder
          required: false
          description: asc or desc
          schema:
            type: string
      responses:
        '200':
          description: list of the encodersPool
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encoders
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        encoders:
                          type: array
                          items:
                            $ref: '#/components/schemas/EncodersPool'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - encoder
      summary: add a new encodersPool
      operationId: addEncodersPool
      description: This API adds a new encodersPool into the MMS platform. It can be executed only by a User having the editEncodersPool or admin priviledge
      responses:
        '201':
          description: encodersPool created successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - EncodersPoolKey
                  properties:
                    EncodersPoolKey:
                      type: integer
                      format: int64
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - Label
                  - encoderKeys
                properties:
                  encoderKeys:
                    type: array
                    items:
                      type: integer
                      format: int64
        description: 'EncodersPool details'
  /encodersPool/{encodersPoolKey}:
    get:
      tags:
        - encoder
      summary: get encodersPool details
      operationId: encodersPoolDetails
      description: return the encodersPool details identified by the encodersPoolKey parameter
      parameters:
        - in: path
          name: encodersPoolKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encodersPool details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encoders
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        encoders:
                          type: array
                          items:
                            $ref: '#/components/schemas/EncodersPool'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - encoder
      summary: update of the EncodersPool metadata
      operationId: updateEncodersPool
      description: This API updates the EncodersPool metadata. It can be executed only by a User having the editEncodersPool or admin priviledge
      parameters:
        - in: path
          name: encodersPoolKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encodersPool updated successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - EncodersPoolKey
                  properties:
                    EncoderKey:
                      type: integer
                      format: int64
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                  $ref: '#/components/schemas/EncodersPool'
        description: 'EncodersPool fields to be updated'
    delete:
      tags:
        - encoder
      summary: remove the EncodersPool
      operationId: deleteEncodersPool
      description: delete the EncodersPool identified by the encodersPoolKey parameter. It can be executed only by a User having the editEncodersPool or admin priviledge
      parameters:
        - in: path
          name: encodersPoolKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encodersPool deleted successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /workflowAsLibrary:
    get:
      tags:
        - workflowAsLibrary
      summary: list all the workflow libraries
      operationId: workflowAsLibraryList
      description: return all the workflow libraries associated to the Workspace (current api-key).
      responses:
        '200':
          description: list of the workflow libraries
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - workflowsLibrary
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        workflowsLibrary:
                          type: array
                          items:
                            $ref: '#/components/schemas/WorkflowLibrary'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - workflowAsLibrary
      summary: add/update the workflow library
      operationId: updateWorkflowAsLibrary
      description: This API add or updates the library of workflow. The body contains the workflow and his label is the identifier of the workflow
      responses:
        '200':
          description: encodersPool updated successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - EncodersPoolKey
                  properties:
                    EncoderKey:
                      type: integer
                      format: int64
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                  $ref: '#/components/schemas/Workflow'
        description: 'Workflow to be updated'
  /workflowAsLibrary/{workflowLibraryKey}:
    get:
      tags:
        - workflowAsLibrary
      summary: get the workflow library details
      operationId: workflowAsLibraryContent
      description: return the workflow of the library identified by workflowLibraryKey
      parameters:
        - in: path
          name: workflowLibraryKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: workflow of the library
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Workflow'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    delete:
      tags:
        - workflowAsLibrary
      summary: remove the workflow library
      operationId: deleteWorkflowLibrary
      description: delete the workflow library identified by the workflowLibraryKey parameter
      parameters:
        - in: path
          name: workflowLibraryKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: workflow library deleted successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /workflow:
    get:
      tags:
        - workflow
      summary: list of ingested workflows
      operationId: ingetionRootsList
      description: return the list of workflows meeting the input filter parameters
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: mediaItemKey
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: startIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: endIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: label
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [All, NotCompleted, CompletedSuccessful, CompletedWithFailures]
        - in: query
          name: asc
          required: false
          schema:
            type: boolean
        - in: query
          name: ingestionJobOutputs
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: list of the workflow
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - workflows
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        workflows:
                          type: array
                          items:
                            $ref: '#/components/schemas/IngestionRoot'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - workflow
      summary: add a new workflow to be executed
      operationId: addWorkflow
      description: This API add a new workflow to be executed. It can be executed only by a User having the ingestWorkflow or admin priviledge
      responses:
        '201':
          description: details/identifiers about every single job belonging to the workflow
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - workflow
                    - tasks
                  properties:
                    workflow:
                      $ref: '#/components/schemas/IngestionWorkflowResponse'
                    tasks:
                      type: object
                      items:
                        $ref: '#/components/schemas/IngestionTaskResponse'
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                  $ref: '#/components/schemas/Workflow'
        description: 'Workflow to be updated'
  /workflow/{ingestionRootKey}:
    get:
      tags:
        - workflow
      summary: get the ingested workflow details
      operationId: ingetionRootDetails
      description: get the ingested workflow details
      parameters:
        - in: path
          name: ingestionRootKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: workflow details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - workflows
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        workflows:
                          type: array
                          items:
                            $ref: '#/components/schemas/IngestionRoot'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /workflow/metaDataContent/{ingestionRootKey}:
    get:
      tags:
        - workflow
      summary: get the workflow content by a json format
      operationId: ingetionRootMetadataContent
      description: get the workflow content
      parameters:
        - in: path
          name: ingestionRootKey
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: processedMetadata
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: workflow content
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /ingestionJob:
    get:
      tags:
        - workflow
      summary: list all the ingested jobs
      operationId: ingetionJobsList
      description: return the list of ingestion jobs meeting the input filter parameters
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: label
          required: false
          schema:
            type: string
        - in: query
          name: startIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: endIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: ingestionType
          required: false
          schema:
            type: string
            enum: [Add-Content, Remove-Content, Encode, Frame, Periodical-Frames, I-Frames, Motion-JPEG-by-Periodical-Frames, Motion-JPEG-by-I-Frames, Slideshow, Concat-Demuxer, Cut, Overlay-Image-On-Video, Overlay-Text-On-Video, FTP-Delivery, HTTP-Callback, Local-Copy, Extract-Tracks, Post-On-Facebook, Post-On-YouTube, Face-Recognition, Face-Identification, Live-Recorder, Change-File-Format, Video-Speed, Picture-In-Picture, Live-Proxy, Live-Cut, Live-Grid, Awaiting-The-Beginning, Intro-Outro-Overlay, VOD-Proxy, Email-Notification, Media-Cross-Reference, Workflow-As-Library, Check-Streaming, ContentUpdate, ContentRemove, GroupOfTasks, YouTube-Live-Broadcast]
        - in: query
          name: asc
          required: false
          schema:
            type: boolean
        - in: query
          name: ingestionJobOutputs
          required: false
          schema:
            type: boolean
        - in: query
          name: jsonParametersCondition
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [all, notCompleted, completed]
      responses:
        '200':
          description: list of the ingestion jobs
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - ingestionJobs
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        ingestionJobs:
                          type: array
                          items:
                            $ref: '#/components/schemas/IngestionJob'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /ingestionJob/{ingestionJobKey}:
    get:
      tags:
        - workflow
      summary: get the ingested job details
      operationId: ingetionJobDetails
      description: get ingested job details
      parameters:
        - in: path
          name: ingestionJobKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ingestion job details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - ingestionJobs
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        ingestionJobs:
                          type: array
                          items:
                            $ref: '#/components/schemas/IngestionJob'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - workflow
      summary: update the IngestionJob metadata
      operationId: updateIngestionJob
      description: This API updates the IngestionJob metadata. It is possible to update the IngestionJob metadata only in case his status is Start_TaskQueued and his type is LiveRecorder. In this scenario it is possible to change the ingestion job label and/or the channel label and/or the recording period start and/or the recording period end and/or the recording virtual vod. It can be executed only by a User having the editMedia or admin priviledge
      parameters:
        - in: path
          name: ingestionJobKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ingestion job updated successful
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - status
                  properties:
                    status:
                      type: string
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - IngestionType
                  - IngestionJobLabel
                  - ChannelLabel
                  - RecordingPeriodStart
                  - RecordingPeriodEnd
                  - RecordingVirtualVOD
                properties:
                  IngestionType:
                    type: string
                    enum: [Live-Recorder]
                  IngestionJobLabel:
                    type: string
                  ChannelLabel:
                    type: string
                  RecordingPeriodStart:
                    type: string
                    format: date-time
                    example: '2021-04-08T20:28:33Z'
                  RecordingPeriodEnd:
                    type: string
                    format: date-time
                    example: '2021-04-08T20:28:33Z'
                  RecordingVirtualVOD:
                    type: boolean
        description: 'IngestionJob fields to be updated'
    delete:
      tags:
        - workflow
      summary: cancel the ingestion job
      operationId: cancelIngestionJob
      description: cancel the ingestion job identified by the ingestionJobKey parameter. It can be executed only by a User having the cancelIngestionJob or admin priviledge
      parameters:
        - in: path
          name: ingestionJobKey
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: forceCancel
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ingestion job deleted successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /mediaItem:
    get:
      tags:
        - mediaItems
      summary: list all media items metadata
      operationId: listMediaItemsWithoutTagsFilter
      description: This API lists media items (contents) meeting the query filter parameters
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: title
          required: false
          schema:
            type: string
        - in: query
          name: uniqueName
          required: false
          schema:
            type: string
        - in: query
          name: contentType
          required: false
          schema:
            type: string
            enum: [Video, Audio, Image]
        - in: query
          name: liveRecordingChunk
          required: false
          schema:
            type: boolean
        - in: query
          name: startIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: endIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: jsonCondition
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          required: false
          schema:
            type: string
        - in: query
          name: jsonOrderBy
          required: false
          schema:
            type: string
      responses:
        '200':
          description: list media items details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - mediaItems
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        mediaItems:
                          type: array
                          items:
                            $ref: '#/components/schemas/MediaItem'
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - mediaItems
      summary: list all the media items metadata. It is a POST because the body could contain a filter about the tags
      operationId: listMediaItemsWithTagsFilter
      description: This API list media items (contents) meeting the query filter parameters. The body could contain a filter about the tags
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: title
          required: false
          schema:
            type: string
        - in: query
          name: uniqueName
          required: false
          schema:
            type: string
        - in: query
          name: contentType
          required: false
          schema:
            type: string
            enum: [Video, Audio, Image]
        - in: query
          name: liveRecordingChunk
          required: false
          schema:
            type: boolean
        - in: query
          name: startIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: endIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: jsonCondition
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          required: false
          schema:
            type: string
        - in: query
          name: jsonOrderBy
          required: false
          schema:
            type: string
      responses:
        '200':
          description: list media items details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - mediaItems
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        mediaItems:
                          type: array
                          items:
                            $ref: '#/components/schemas/MediaItem'
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                properties:
                  tagsIn:
                    type: array
                    items:
                      type: string
                  tagsNotIn:
                    type: array
                    items:
                      type: string
        description: 'optional input filter for tags'
  /mediaItem/{mediaItemKey}:
    get:
      tags:
        - mediaItems
      summary: get the media item metadata specified by the path parameter mediaItemKey
      operationId: listMediaItem
      description: This API gets the media item meeting the path parameter mediaItemKey
      parameters:
        - in: path
          name: mediaItemKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list media items details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - mediaItems
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        mediaItems:
                          type: array
                          items:
                            $ref: '#/components/schemas/MediaItem'
        '400':
          description: 'Json field is not present or it is null'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - mediaItems
      summary: update the media item metadata
      operationId: updateMediaItemDetails
      description: This API update media item. It can be executed only by a User having the editMedia or admin priviledge
      parameters:
        - in: path
          name: mediaItemKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: media item details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - mediaItems
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        mediaItems:
                          type: array
                          items:
                            $ref: '#/components/schemas/MediaItem'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                properties:
                  Title:
                    type: string
                  UserData:
                    type: object
                    additionalProperties: {}
                  RetentionInMinutes:
                    type: integer
                    format: int32
                  Tags:
                    type: array
                    items:
                      type: string
                  UniqueName:
                    type: string
        description: 'optional input filter for tags'
  /mediaItem/{mediaItemKey}/{physicalPathKey}:
    put:
      tags:
        - mediaItems
      summary: update the physical path metadata
      operationId: updatePhysicalPathDetails
      description: This API updates physical path metadata. It can be executed only by a User having the editMedia or admin priviledge
      parameters:
        - in: path
          name: mediaItemKey
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: physicalPathKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: physical path details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - mediaItems
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        mediaItems:
                          type: array
                          items:
                            $ref: '#/components/schemas/MediaItem'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - RetentionInMinutes
                properties:
                  RetentionInMinutes:
                    type: integer
                    format: int32
        description: 'optional input filter for tags'
  /tag:
    get:
      tags:
        - mediaItems
      summary: list all the tags used by the media items
      operationId: listTags
      description: This API lists tags meeting the input filter parameters
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: contentType
          required: false
          schema:
            type: string
            enum: [Video, Audio, Image]
      responses:
        '200':
          description: list tags
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - tags
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        tags:
                          type: array
                          items:
                            type: string
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /encodingJob:
    get:
      tags:
        - encoding
      summary: list all the encoding jobs
      operationId: encodingJobsList
      description: return the list of encoding jobs meeting the input filter parameters
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: startIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: endIngestionDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: startEncodingDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: endEncodingDate
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-04-08T20:28:33Z'
        - in: query
          name: encoderKey
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: alsoEncodingJobsFromOtherWorkspaces
          required: false
          schema:
            type: boolean
        - in: query
          name: asc
          required: false
          schema:
            type: boolean
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [All, Completed, Processing, ToBeProcessed]
        - in: query
          name: types
          required: false
          schema:
            type: string
            enum: [EncodeVideoAudio, EncodeImage, OverlayImageOnVideo, OverlayTextOnVideo, GenerateFrames, SlideShow, FaceRecognition, FaceIdentification, LiveRecorder, VideoSpeed, PictureInPicture, LiveProxy, LiveGrid, AwaitingTheBeginning, IntroOutroOverlay, CutFrameAccurate, VODProxy]
            description: 'it is possible to have also more than one type comma separated'
      responses:
        '200':
          description: list of the encoding jobs
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encodingJobs
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        encodingJobs:
                          type: array
                          items:
                            $ref: '#/components/schemas/EncodingJob'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /encodingJob/{encodingJobKey}:
    get:
      tags:
        - encoding
      summary: get the encoding job details
      operationId: encodingJobDetails
      description: get encoding job details
      parameters:
        - in: path
          name: encodingJobKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encoding job details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encodingJobs
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        ingestionJobs:
                          type: array
                          items:
                            $ref: '#/components/schemas/EncodingJob'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - encoding
      summary: update the EncodingJob metadata
      operationId: updateEncodingJob
      description: This API updates the encoding priority of an encoding job or, if the tryEncodingAgain query parameter is true, re-try again the encoding.
      parameters:
        - in: path
          name: encodingJobKey
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: newEncodingJobPriorityCode
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: tryEncodingAgain
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: encoding job updated successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    delete:
      tags:
        - encoding
      summary: remove/kill the EncodingJob
      operationId: removeEncodingJob
      description: This API remove if not started or kill if it is running the encoding job. It can be executed only by a User having the killEncoding or admin priviledge
      parameters:
        - in: path
          name: encodingJobKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encoding job removed/killed successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /encodingProfile/{encodingProfileKey}:
    get:
      tags:
        - encodingProfiles
      summary: get the encoding profile details identified by encodingProfileKey
      operationId: encodingProfileDetails
      description: get encoding profile details
      parameters:
        - in: path
          name: encodingProfileKey
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: contentType
          required: false
          schema:
            type: string
            enum: [Video, Audio, Image]
        - in: query
          name: label
          required: false
          schema:
            type: string
      responses:
        '200':
          description: encoding profile details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encodingProfiles
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        encodingProfiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/EncodingProfile'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    delete:
      tags:
        - encodingProfiles
      summary: delete the encoding profile
      operationId: deleteEncodingProfile
      description: delete encoding profile. It can be executed only by a User having the createProfiles or admin priviledge
      parameters:
        - in: path
          name: encodingProfileKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encoding profile removed successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /encodingProfilesSet/{encodingProfilesSetKey}:
    get:
      tags:
        - encodingProfiles
      summary: get the encoding profiles set details identified by encodingProfilesSetKey
      operationId: encodingProfilesSetDetails
      description: get encoding profiles set details
      parameters:
        - in: path
          name: encodingProfilesSetKey
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: contentType
          required: false
          schema:
            type: string
            enum: [Video, Audio, Image]
      responses:
        '200':
          description: encoding profiles set details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - encodingProfilesSets
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        encodingProfilesSets:
                          type: array
                          items:
                            $ref: '#/components/schemas/EncodingProfilesSet'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    delete:
      tags:
        - encodingProfiles
      summary: delete the encoding profiles set
      operationId: deleteEncodingProfilesSet
      description: delete encoding profiles set. It can be executed only by a User having the createProfiles or admin priviledge
      parameters:
        - in: path
          name: encodingProfilesSetKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: encoding profiles set removed successful
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /encodingProfilesSet:
    put:
      tags:
        - encodingProfiles
      summary: add/update the encoding profiles set
      operationId: addEncodingProfilesSet
      description: add/update encoding profiles set. It can be executed only by a User having the createProfiles or admin priviledge
      parameters:
        - in: query
          name: contentType
          required: true
          schema:
            type: string
            enum: [Video, Audio, Image]
      responses:
        '200':
          description: encoding profiles set details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - encodingProfilesSet
                  properties:
                    encodingProfilesSet:
                      type: object
                      required:
                        - encodingProfilesSet
                        - profiles
                      properties:
                        encodingProfilesSet:
                          type: object
                          required:
                            - encodingProfilesSetKey
                            - label
                          properties:
                            encodingProfilesSetKey:
                              type: integer
                              format: int64
                            label:
                              type: string
                        profiles:
                          type: array
                          items:
                            type: object
                            required:
                              - encodingProfileKey
                              - label
                            properties:
                              encodingProfileKey:
                                type: integer
                                format: int64
                              label:
                                type: string
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - Label
                  - Profiles
                properties:
                  Label:
                    type: string
                    description: label of the encoding profiles set
                  Profiles:
                    type: array
                    items:
                      type: string
                      description: label of the encoding profile
        description: 'encoding profiles set details'
  /encodingProfile:
    put:
      tags:
        - encodingProfiles
      summary: add/update the encoding profile
      operationId: addEncodingProfile
      description: add/update encoding profile. It can be executed only by a User having the createProfiles or admin priviledge
      parameters:
        - in: query
          name: contentType
          required: true
          schema:
            type: string
            enum: [Video, Audio, Image]
      responses:
        '200':
          description: encoding profile details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - encodingProfilesSetKey
                    - label
                  properties:
                    encodingProfilesSetKey:
                      type: integer
                      format: int64
                    label:
                      type: string
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncodingProfileBody'
        description: 'encoding profiles set details'
  /delivery/vod/{physicalPathKey}:
    get:
      tags:
        - delivery
      summary: create a VOD delivery authorization and return an authorized delivery URL
      operationId: createVODDeliveryAuthorization
      description: create a VOD delivery authorization. It can be executed only by a User having the deliveryAuthorization or admin priviledge
      parameters:
        - in: path
          name: physicalPathKey
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: ttlInSeconds
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: maxRetries
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: save
          required: false
          schema:
            type: boolean
        - in: query
          name: authorizationThroughPath
          required: false
          schema:
            type: boolean
        - in: query
          name: redirect
          required: false
          schema:
            type: boolean
      responses:
        '201':
          description: authorization details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - deliveryURL
                    - deliveryFileName
                    - ttlInSeconds
                    - maxRetries
                  properties:
                    deliveryURL:
                      type: string
                    deliveryFileName:
                      type: string
                    ttlInSeconds:
                      type: integer
                      format: int32
                    maxRetries:
                      type: integer
                      format: int32
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /delivery/live/{ingestionJobKey}:
    get:
      tags:
        - delivery
      summary: create a LIVE delivery authorization and return an authorized delivery URL
      operationId: createLIVEDeliveryAuthorization
      description: create a LIVE delivery authorization. It can be executed only by a User having the deliveryAuthorization or admin priviledge
      parameters:
        - in: path
          name: ingestionJobKey
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: ttlInSeconds
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: maxRetries
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: authorizationThroughPath
          required: false
          schema:
            type: boolean
        - in: query
          name: redirect
          required: false
          schema:
            type: boolean
      responses:
        '201':
          description: authorization details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - deliveryURL
                    - deliveryFileName
                    - ttlInSeconds
                    - maxRetries
                  properties:
                    deliveryURL:
                      type: string
                    deliveryFileName:
                      type: string
                    ttlInSeconds:
                      type: integer
                      format: int32
                    maxRetries:
                      type: integer
                      format: int32
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /delivery/bulk:
    post:
      tags:
        - delivery
      summary: create a bulk of delivery authorizations and one authorized delivery URL for each media specified by the bulk
      operationId: createBulkDeliveryAuthorization
      description: create a bulk of delivery authorizations. It can be executed only by a User having the deliveryAuthorization or admin priviledge
      parameters:
        - in: query
          name: ttlInSeconds
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: maxRetries
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: authorizationThroughPath
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: authorizations request details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - uniqueNameList
                    - liveIngestionJobKeyList
                  properties:
                    uniqueNameList:
                      type: object
                      items:
                        type: object
                        required:
                          - uniqueName
                          - encodingProfileKey
                          - encodingProfileLabel
                          - deliveryURL
                        properties:
                          uniqueName:
                            type: string
                          encodingProfileKey:
                            type: integer
                            format: int64
                          encodingProfileLabel:
                            type: string
                          deliveryURL:
                            type: string
                    liveIngestionJobKeyList:
                      type: object
                      items:
                        type: object
                        required:
                          - ingestionJobKey
                          - deliveryCode
                          - deliveryURL
                        properties:
                          ingestionJobKey:
                            type: integer
                            format: int64
                          deliveryCode:
                            type: integer
                            format: int64
                          deliveryURL:
                            type: string
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - uniqueNameList
                  - liveIngestionJobKeyList
                properties:
                  uniqueNameList:
                    type: object
                    items:
                      type: object
                      required:
                        - uniqueName
                        - encodingProfileKey
                        - encodingProfileLabel
                      properties:
                        uniqueName:
                          type: string
                        encodingProfileKey:
                          type: integer
                          format: int64
                        encodingProfileLabel:
                          type: string
                  liveIngestionJobKeyList:
                    type: object
                    items:
                      type: object
                      required:
                        - ingestionJobKey
                        - deliveryCode
                      properties:
                        ingestionJobKey:
                          type: integer
                          format: int64
                        deliveryCode:
                          type: integer
                          format: int64
        description: 'request authorizations details'
  /conf/youtube:
    get:
      tags:
        - social
      summary: list all youTube configuration
      operationId: listYouTubeConfiguration
      description: list all youTube configuration
      responses:
        '200':
          description: youTube configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - youTubeConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        youTubeConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/YouTubeConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - social
      summary: add a youTube configuration
      operationId: addYouTubeConfiguration
      description: add a youTube configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      responses:
        '201':
          description: youTube configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/YouTubeConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/YouTubeConf'
        description: 'youTube configuration details'
  /conf/youtube/{confKey}:
    put:
      tags:
        - social
      summary: update a youTube configuration
      operationId: modifyYouTubeConfiguration
      description: update a youTube configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: youTube configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/YouTubeConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/YouTubeConf'
        description: 'youTube configuration details'
    delete:
      tags:
        - social
      summary: delete a youTube configuration
      operationId: deleteYouTubeConfiguration
      description: delete a youTube configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: youTube configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /conf/facebook:
    get:
      tags:
        - social
      summary: list all facebook configuration
      operationId: listFacebookConfiguration
      description: list all facebook configuration
      responses:
        '200':
          description: facebook configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - facebookConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        facebookConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/FacebookConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - social
      summary: add a facebook configuration
      operationId: addFacebookConfiguration
      description: add a facebook configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      responses:
        '201':
          description: facebook configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - Label
                  - PageToken
                properties:
                  Label:
                    type: string
                  PageToken:
                    type: string
        description: 'facebook configuration details'
  /conf/facebook/{confKey}:
    put:
      tags:
        - social
      summary: update a facebook configuration
      operationId: modifyFacebookConfiguration
      description: update a facebook configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: facebook configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                type: object
                required:
                  - Label
                  - PageToken
                properties:
                  Label:
                    type: string
                  PageToken:
                    type: string
        description: 'facebook configuration details'
    delete:
      tags:
        - social
      summary: delete a facebook configuration
      operationId: deleteFacebookConfiguration
      description: delete a facebook configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: facebook configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /conf/channel:
    get:
      tags:
        - channels
      summary: list all channels configuration
      operationId: listChannelsConfiguration
      description: list all channels configuration
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: label
          required: false
          schema:
            type: string
        - in: query
          name: url
          required: false
          schema:
            type: string
        - in: query
          name: sourceType
          required: false
          schema:
            type: string
            enum: [IP_PULL, IP_PUSH, Satellite, CaptureLive]
        - in: query
          name: type
          required: false
          schema:
            type: string
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: region
          required: false
          schema:
            type: string
        - in: query
          name: country
          required: false
          schema:
            type: string
        - in: query
          name: labelOrder
          required: false
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - channelConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        channelConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/ChannelConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - channels
      summary: add a channel configuration
      operationId: addChannelConfiguration
      description: add a channel configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      responses:
        '201':
          description: channel configuration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelConf'
        description: 'ip channel configuration details'
  /conf/channel/{confKey}:
    get:
      tags:
        - channels
      summary: get the channel configuration
      operationId: channelConfiguration
      description: get the channel configuration
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - channelConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        channelConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/ChannelConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - channels
      summary: update an channel configuration
      operationId: modifyChannelConfiguration
      description: update an channel configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ip channel configuration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelConf'
        description: 'ip channel configuration details'
    delete:
      tags:
        - channels
      summary: delete an channel configuration
      operationId: deleteChannelConfiguration
      description: delete a channel configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /conf/sourceSatChannel:
    get:
      tags:
        - channels
      summary: list all source SAT channels configuration
      operationId: listSourceSATChannelsConfiguration
      description: list all Source SAT channels configuration
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: rows
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: serviceId
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: lnb
          required: false
          schema:
            type: string
        - in: query
          name: frequency
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: videoPid
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: audioPids
          required: false
          schema:
            type: string
        - in: query
          name: nameOrder
          required: false
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Source SAT channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - channelConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        channelConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/SourceSATChannelConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - channels
      summary: add a Source SAT channel configuration
      operationId: addSourceSATChannelConfiguration
      description: add a Source SAT channel configuration. It can be executed only by a User having the admin priviledge
      responses:
        '201':
          description: Source SAT channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceSATChannelConf'
        description: 'Source SAT channel configuration details'
  /conf/sourceSatChannel/{confKey}:
    get:
      tags:
        - channels
      summary: get the Source SAT channel configuration
      operationId: sourceSatChannelConfiguration
      description: get the Source SAT channel configuration
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: source SAT channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - channelConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        channelConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/SourceSATChannelConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - channels
      summary: update a Source SAT channel configuration
      operationId: modifySourceSATChannelConfiguration
      description: update a Source SAT channel configuration. It can be executed only by a User having the admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Source SAT channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceSATChannelConf'
        description: 'Source SAT channel configuration details'
    delete:
      tags:
        - channels
      summary: delete a Source SAT channel configuration
      operationId: deleteSourceSATChannelConfiguration
      description: delete a Source SAT channel configuration. It can be executed only by a User having the admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Source SAT channel configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /conf/ftp:
    get:
      tags:
        - ftp
      summary: list all FTP configuration
      operationId: listFTPConfigurations
      description: list all FTP configuration
      responses:
        '200':
          description: FTP configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - ftpConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        ftpConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/FTPConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - ftp
      summary: add a FTP configuration
      operationId: addFTPConfiguration
      description: add a FTP configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      responses:
        '201':
          description: FTP configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FTPConf'
        description: 'FTP configuration details'
  /conf/ftp/{confKey}:
    get:
      tags:
        - ftp
      summary: list all FTP configuration
      operationId: listFTPConfiguration
      description: list all FTP configuration
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: FTP configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - ftpConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        ftpConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/FTPConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - ftp
      summary: update a FTP configuration
      operationId: modifyFTPConfiguration
      description: update a FTP configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ftp configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FTPConf'
        description: 'FTP configuration details'
    delete:
      tags:
        - ftp
      summary: delete a FTP configuration
      operationId: deleteFTPConfiguration
      description: delete a FTP configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: FTP configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
  /conf/email:
    get:
      tags:
        - email
      summary: list all EMail configuration
      operationId: listEMailConfigurations
      description: list all EMail configuration
      responses:
        '200':
          description: EMail configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - emailConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        emailConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/EMailConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    post:
      tags:
        - email
      summary: add a EMail configuration
      operationId: addEMailConfiguration
      description: add a EMail configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      responses:
        '201':
          description: EMail configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EMailConf'
        description: 'EMail configuration details'
  /conf/email/{confKey}:
    get:
      tags:
        - email
      summary: list all EMail configuration
      operationId: listEMailConfiguration
      description: list all EMail configuration
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: EMail configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    # - requestParameters
                    - response
                  properties:
                    # requestParameters:
                    response:
                      type: object
                      required:
                        - numFound
                        - emailConf
                      properties:
                        numFound:
                          type: integer
                          format: int32
                        emailConf:
                          type: array
                          items:
                            $ref: '#/components/schemas/EMailConf'
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
    put:
      tags:
        - email
      summary: update a EMail configuration
      operationId: modifyEMailConfiguration
      description: update a EMail configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: EMail configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EMailConf'
        description: 'EMail configuration details'
    delete:
      tags:
        - email
      summary: delete an EMail configuration
      operationId: deleteEMailConfiguration
      description: delete an EMail configuration. It can be executed only by a User having the editConfiguration or admin priviledge
      parameters:
        - in: path
          name: confKey
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: EMail configuration details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  required:
                    - confKey
                  properties:
                    confKey:
                      type: integer
                      format: int64
        '401':
          description: 'wrong basic authentication'
        '500':
          description: 'internal server error'
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    AudioTrack:
      type: object
      required:
        - audioTrackKey
        - trackIndex
        - codecName
        - bitRate
        - channels
        - sampleRate
        - language
        - durationInMilliSeconds
      properties:
        audioTrackKey:
          type: integer
          format: int64
        trackIndex:
          type: integer
          format: int32
        codecName:
          type: string
        bitRate:
          type: integer
          format: int64
        channels:
          type: integer
          format: int32
        sampleRate:
          type: integer
          format: int32
        language:
          type: string
        durationInMilliSeconds:
          type: integer
          format: int64
    ChannelConf:
      type: object
      required:
        - label
        - sourceType
      properties:
        confKey:
          type: integer
          format: int64
        label:
          type: string
        sourceType:
          type: string
          enum: [IP_PULL, IP_PUSH, Satellite, CaptureLive]
        encodersPool:
          type: string
        url:
          type: string
        pushProtocol:
          type: string
        pushServerName:
          type: string
        pushServerPort:
          type: integer
          format: int32
        pushUri:
          type: string
        pushListenTimeout:
          type: integer
          format: int32
        captureVideoDeviceNumber:
          type: integer
          format: int32
        captureVideoInputFormat:
          type: string
        captureFrameRate:
          type: integer
          format: int32
        captureWidth:
          type: integer
          format: int32
        captureHeight:
          type: integer
          format: int32
        captureAudioDeviceNumber:
          type: integer
          format: int32
        captureChannelsNumber:
          type: integer
          format: int32
        satSourceSATConfKey:
          type: integer
          format: int64
        type:
          type: string
        description:
          type: string
        name:
          type: string
        region:
          type: string
        country:
          type: string
        imageMediaItemKey:
          type: integer
          format: int64
        imageUniqueName:
          type: string
        position:
          type: integer
          format: int32
        channelData:
          type: object
          additionalProperties: {}
    CrossReference:
      type: object
      required:
        - sourceMediaItemKey
        - type
        - parameters
      properties:
        sourceMediaItemKey:
          type: integer
          format: int64
        type:
          type: string
          enum: [ImageOfVideo, ImageOfAudio, FaceOfVideo, CutOfVideo, CutOfAudio]
        parameters:
          type: string
    Encoder:
      type: object
      required:
        - enabled
        - encoderKey
        - external
        - label
        - protocol
        - port
        - serverName
      properties:
        enabled:
          type: boolean
          example: true
        encoderKey:
          type: integer
          format: int64
        external:
          type: boolean
          example: true
        label:
          type: string
          example: encoder for channels
        protocol:
          type: string
          example: http
        port:
          type: integer
          format: int32
          example: 8088
        serverName:
          type: string
          example: mms-t-transcoder-fr-1
    EncodersPool:
      type: object
      required:
        - encodersPoolKey
        - label
        - encoders
      properties:
        encodersPoolKey:
          type: integer
          format: int64
        label:
          type: string
          example: encodersPool for channels
        encoders:
          type: array
          items:
            $ref: '#/components/schemas/Encoder'
    EncodingJob:
      type: object
      required:
        - encodingJobKey
        - ingestionJobKey
        - type
        - status
        - start
        - end
        - parameters
        - progress
        - failuresNumber
        - encodingPriority
        - encodingPriorityCode
        - maxEncodingPriorityCode
        - ownedByCurrentWorkspace
        - processorMMS
        - encoderKey
        - encodingPid
      properties:
        encodingJobKey:
          type: integer
          format: int64
        ingestionJobKey:
          type: integer
          format: int64
        type:
          type: string
          enum: [EncodeVideoAudio, EncodeImage, OverlayImageOnVideo, OverlayTextOnVideo, GenerateFrames, SlideShow, FaceRecognition, FaceIdentification, LiveRecorder, VideoSpeed, PictureInPicture, LiveProxy, LiveGrid, AwaitingTheBeginning, IntroOutroOverlay, CutFrameAccurate, VODProxy]
        status:
          type: string
          enum: [ToBeProcessed, Processing, End_Success, End_Failed, End_KilledByUser, End_CanceledByUser, End_CanceledByMMS]
        start:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        end:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        parameters:
          type: object
          additionalProperties: {}
        progress:
          type: integer
          format: int32
        failuresNumber:
          type: integer
          format: int32
        encodingPriority:
          type: string
          enum: [Low, Medium, High]
        encodingPriorityCode:
          type: integer
          format: int32
        maxEncodingPriorityCode:
          type: integer
          format: int32
        ownedByCurrentWorkspace:
          type: boolean
        processorMMS:
          type: string
        encoderKey:
          type: integer
          format: int64
        encodingPid:
          type: integer
          format: int64
    IngestionJob:
      type: object
      required:
        - ingestionJobKey
        - ingestionRootKey
        - label
        - status
        - ingestionType
        - startProcessing
        - endProcessing
        - processingStartingFrom
        - encodingJob
        - downloadingProgress
        - errorMessage
        - mediaItems
        - metaDataContent
        - processorMMS
        - uploadingProgress
      properties:
        ingestionJobKey:
          type: integer
          format: int64
        ingestionRootKey:
          type: integer
          format: int64
        label:
          type: string
        status:
          type: string
          enum: [Start_TaskQueued, SourceDownloadingInProgress, SourceMovingInProgress, SourceCopingInProgress, SourceUploadingInProgress, EncodingQueued, End_CanceledByUser, End_CanceledByMMS, End_ValidationMetadataFailed, End_ValidationMediaSourceFailed, End_WorkspaceReachedMaxStorageOrIngestionNumber, End_IngestionFailure, End_NotToBeExecuted, End_NotToBeExecuted_ChunkNotSelected, End_TaskSuccess]
        ingestionType:
          type: string
          enum: [Add-Content, Remove-Content, Encode, Frame, Periodical-Frames, I-Frames, Motion-JPEG-by-Periodical-Frames, Motion-JPEG-by-I-Frames, Slideshow, Concat-Demuxer, Cut, Overlay-Image-On-Video, Overlay-Text-On-Video, FTP-Delivery, HTTP-Callback, Local-Copy, Extract-Tracks, Post-On-Facebook, Post-On-YouTube, Face-Recognition, Face-Identification, Live-Recorder, Change-File-Format, Video-Speed, Picture-In-Picture, Live-Proxy, Live-Cut, Live-Grid, Awaiting-The-Beginning, Intro-Outro-Overlay, VOD-Proxy, Email-Notification, Media-Cross-Reference, Workflow-As-Library, Check-Streaming, ContentUpdate, ContentRemove, GroupOfTasks]
        startProcessing:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        endProcessing:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        processingStartingFrom:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        encodingJob:
          $ref: '#/components/schemas/EncodingJob'
        downloadingProgress:
          type: integer
          format: int32
        errorMessage:
          type: string
        mediaItems:
          type: array
          items:
            $ref: '#/components/schemas/MediaItem'
        metaDataContent:
          type: string
        processorMMS:
          type: string
        uploadingProgress:
          type: integer
          format: int32
    EMailConf:
      type: object
      required:
        - confKey
        - label
        - addresses
        - subject
        - message
      properties:
        confKey:
          type: integer
          format: int64
        label:
          type: string
        addresses:
          type: string
        subject:
          type: string
        message:
          type: string
    EncodingProfile:
      type: object
      required:
        - encodingProfileKey
        - label
        - contentType
        - global
        - deliveryTechnology
        - profile
      properties:
        encodingProfileKey:
          type: integer
          format: int64
        label:
          type: string
        contentType:
          type: string
          enum: [Video, Audio, Image]
        global:
          type: boolean
        deliveryTechnology:
          type: string
        profile:
          $ref: '#/components/schemas/EncodingProfileBody'
    EncodingProfileBody:
      type: object
      required:
        - Label
        - FileFormat
      properties:
        Label:
          type: string
        FileFormat:
          type: string
        HLS:
          $ref: '#/components/schemas/EncodingProfileHLSParameters'
        Video:
          $ref: '#/components/schemas/EncodingProfileVideoParameters'
        Audio:
          $ref: '#/components/schemas/EncodingProfileAudioParameters'
        Image:
          $ref: '#/components/schemas/EncodingProfileImageParameters'
    EncodingProfileHLSParameters:
      type: object
      required:
        - SegmentDuration
      properties:
        SegmentDuration:
          type: integer
          format: int32
    EncodingProfileVideoParameters:
      type: object
      required:
        - Codec
        - Profile
        - BitRates
        - TwoPasses
        - FrameRate
        - OtherOutputParameters
      properties:
        Codec:
          type: string
        Profile:
          type: string
        BitRates:
          type: object
          items:
            type: object
            required:
              - Width
              - Height
              - KBitRate
            properties:
              Width:
                type: integer
                format: int32
              Height:
                type: integer
                format: int32
              KBitRate:
                type: integer
                format: int32
        TwoPasses:
          type: boolean
        FrameRate:
          type: integer
          format: int32
        OtherOutputParameters:
          type: string
    EncodingProfileAudioParameters:
      type: object
      required:
        - Codec
        - ChannelsNumber
        - BitRates
      properties:
        Codec:
          type: string
        ChannelsNumber:
          type: integer
          format: int32
        BitRates:
          type: object
          items:
            type: object
            required:
              - KBitRate
            properties:
              KBitRate:
                type: integer
                format: int32
    EncodingProfileImageParameters:
      type: object
      required:
        - Width
        - Height
        - InterlaceType
        - AspectRatio
        - Comment
      properties:
        Width:
          type: integer
          format: int32
        Height:
          type: integer
          format: int32
        InterlaceType:
          type: string
          enum: [NoInterlace, LineInterlace, PlaneInterlace, PartitionInterlace]
        AspectRatio:
          type: boolean
        Comment:
          type: string
    EncodingProfilesSet:
      type: object
      required:
        - encodingProfilesSetKey
        - label
        - contentType
        - encodingProfiles
      properties:
        encodingProfilesSetKey:
          type: integer
          format: int64
        label:
          type: string
        contentType:
          type: string
          enum: [Video, Audio, Image]
        encodingProfiles:
          type: array
          items:
            $ref: '#/components/schemas/EncodingProfile'
    FacebookConf:
      type: object
      required:
        - confKey
        - label
        - pageToken
      properties:
        confKey:
          type: integer
          format: int64
        label:
          type: string
        pageToken:
          type: string
    FTPConf:
      type: object
      required:
        - confKey
        - label
        - server
        - port
        - userName
        - password
        - remoteDirectory
      properties:
        confKey:
          type: integer
          format: int64
        label:
          type: string
        server:
          type: string
        port:
          type: integer
          format: int32
        userName:
          type: string
        password:
          type: string
        remoteDirectory:
          type: string
    IngestionRoot:
      type: object
      required:
        - ingestionRootKey
        - label
        - status
        - ingestionDate
        - ingestionJobs
        - lastUpdate
        - userKey
        - userName
      properties:
        ingestionRootKey:
          type: integer
          format: int64
        label:
          type: string
        status:
          type: string
        ingestionDate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        ingestionJobs:
          type: array
          items:
            $ref: '#/components/schemas/IngestionJob'
        lastUpdate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        userKey:
          type: integer
          format: int64
        userName:
          type: string
    IngestionWorkflowResponse:
      type: object
      required:
        - ingestionRootKey
        - label
      properties:
        ingestionRootKey:
          type: integer
          format: int64
        label:
          type: string
    IngestionTaskResponse:
      type: object
      required:
        - ingestionJobKey
        - label
      properties:
        ingestionJobKey:
          type: integer
          format: int64
        label:
          type: string
    MediaItem:
      type: object
      required:
        - mediaItemKey
        - title
        - contentType
        - ingestionDate
        - physicalPaths
        - startPublishing
        - endPublishing
        - uniqueName
        - userData
        - retentionInMinutes
        - tags
        - crossReferences
        - ingester
        - deliveryFileName
        - providerName
      properties:
        mediaItemKey:
          type: integer
          format: int64
        title:
          type: string
        contentType:
          type: string
          enum: [Video, Audio, Image]
        ingestionDate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        physicalPaths:
          type: array
          items:
            $ref: '#/components/schemas/PhysicalPath'
        startPublishing:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        endPublishing:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        uniqueName:
          type: string
        userData:
          type: object
          additionalProperties: {}
        retentionInMinutes:
          type: integer
          format: int32
        tags:
          type: array
          items:
            type: string
        crossReferences:
          type: array
          items:
            $ref: '#/components/schemas/CrossReference'
        ingester:
          type: string
        deliveryFileName:
          type: string
        providerName:
          type: string
    PhysicalPath:
      type: object
      required:
        - physicalPathKey
        - encodingProfileKey
        - fileFormat
        - partitionNumber
        - relativePath
        - fileName
        - sizeInBytes
        - retentionInMinutes
        - durationInMilliSeconds
        - bitRate
        - videoTracks
        - audioTracks
        - deliveryTechnology
        - externalDeliveryTechnology
        - externalDeliveryURL
        - externalReadOnlyStorage
        - creationDate
      properties:
        physicalPathKey:
          type: integer
          format: int64
        encodingProfileKey:
          type: integer
          format: int64
        fileFormat:
          type: string
        partitionNumber:
          type: integer
          format: int32
        relativePath:
          type: string
        fileName:
          type: string
        sizeInBytes:
          type: integer
          format: int64
        retentionInMinutes:
          type: integer
          format: int32
        durationInMilliSeconds:
          type: integer
          format: int64
        bitRate:
          type: integer
          format: int64
        videoTracks:
          type: array
          items:
            $ref: '#/components/schemas/VideoTrack'
        audioTracks:
          type: array
          items:
            $ref: '#/components/schemas/AudioTrack'
        deliveryTechnology:
          type: string
        externalDeliveryTechnology:
          type: string
        externalDeliveryURL:
          type: string
        externalReadOnlyStorage:
          type: boolean
        creationDate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
    SourceSATChannelConf:
      type: object
      required:
        - confKey
        - serviceId
        - networkId
        - transportStreamId
        - name
        - satellite
        - frequency
        - lnb
        - videoPid
        - audioPids
        - audioItalianPid
        - audioEnglishPid
        - teletextPid
        - modulation
        - polarization
        - symbolRate
        - country
        - deliverySystem
      properties:
        confKey:
          type: integer
          format: int64
        serviceId:
          type: integer
          format: int64
        networkId:
          type: integer
          format: int64
        transportStreamId:
          type: integer
          format: int64
        name:
          type: string
        satellite:
          type: string
        frequency:
          type: integer
          format: int64
        lnb:
          type: string
        videoPid:
          type: integer
          format: int32
        audioPids:
          type: string
        audioItalianPid:
          type: integer
          format: int32
        audioEnglishPid:
          type: integer
          format: int32
        teletextPid:
          type: integer
          format: int32
        modulation:
          type: string
        polarization:
          type: string
        symbolRate:
          type: integer
          format: int64
        country:
          type: string
        deliverySystem:
          type: string
    Support:
      type: object
      required:
        - UserEmailAddress
        - Subject
        - Text
      properties:
        UserEmailAddress:
          type: string
          example: anthony@companyName.com
        Subject:
          type: string
          example: Proxy task does not work
        Text:
          type: string
          example: 'The Proxy task fails woth the following error: .....'
    User:
      type: object
      required:
        - userKey
        - name
        - email
        - country
        - ldapEnabled
        - creationDate
        - expirationDate
      properties:
        userKey:
          type: integer
          format: int64
        name:
          type: string
          example: Anthony
        email:
          type: string
          example: anthony@companyName.com
        country:
          type: string
          example: Italy
        ldapEnabled:
          type: boolean
          example: false
        creationDate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        expirationDate:
          type: string
          format: date-time
          example: '2031-04-06T20:06:39Z'
    UserAndWorkspace:
      type: object
      required:
        - name
        - userKey
        - eMailAddress
        - country
        - creationDate
        - expirationDate
        - ldapEnabled
        - workspace
      properties:
        name:
          type: string
          example: Anthony
        userKey:
          type: integer
          format: int64
          example: 1
        eMailAddress:
          type: string
          format: email
          example: anthony@companyName.com
        country:
          type: string
          example: Italy
        creationDate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        expirationDate:
          type: string
          format: date-time
          example: '2031-04-06T20:06:39Z'
        ldapEnabled:
          type: boolean
          example: false
        workspace:
          $ref: '#/components/schemas/Workspace'
    UserAPIKey:
      type: object
      required:
        - apiKey
        - owner
        - default
        - expirationDate
        - admin
        - applicationRecorder
        - cancelIngestionJob
        - createProfiles
        - createRemoveWorkspace
        - deliveryAuthorization
        - editConfiguration
        - editEncodersPool
        - editMedia
        - ingestWorkflow
        - killEncoding
        - shareWorkspace
      properties:
        apiKey:
          type: string
          example: 1j1l1x1p1l1d1q1r1f111w1u1d1p1e1r1q1h1C1j1p1d1l1o111f1r1p1b1b1V111S1b1b14141419131714161518
        owner:
          type: boolean
          example: true
        default:
          type: boolean
          example: true
        expirationDate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        admin:
          type: boolean
          example: true
        applicationRecorder:
          type: boolean
          example: true
        cancelIngestionJob:
          type: boolean
          example: true
        createProfiles:
          type: boolean
          example: true
        createRemoveWorkspace:
          type: boolean
          example: true
        deliveryAuthorization:
          type: boolean
          example: true
        editConfiguration:
          type: boolean
          example: true
        editEncodersPool:
          type: boolean
          example: true
        editMedia:
          type: boolean
          example: true
        ingestWorkflow:
          type: boolean
          example: true
        killEncoding:
          type: boolean
          example: true
        shareWorkspace:
          type: boolean
          example: true
    UserRegistration:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: anthony@companyName.com
        password:
          type: string
          example: 19264hd93h
        name:
          type: string
          example: Anthony
        workspaceName:
          type: string
          example: sport videos
          description: name of the default Workspace associated to the User. If not provided
            it is set with the 'Name' of the User if present adn, if not present, it is set
            with the 'EMail' of the User.
        country:
          type: string
          example: Italy
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: Anthony
        email:
          type: string
          example: anthony@companyName.com
        country:
          type: string
          example: Italy
        newPassword:
          type: string
          example: 19264hd93h
        oldPassword:
          type: string
          example: 19264hd93h
    VideoTrack:
      type: object
      required:
        - videoTrackKey
        - trackIndex
        - width
        - height
        - codecName
        - profile
        - bitRate
        - avgFrameRate
        - durationInMilliSeconds
      properties:
        videoTrackKey:
          type: integer
          format: int64
        trackIndex:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
        codecName:
          type: string
        profile:
          type: string
        bitRate:
          type: integer
          format: int64
        avgFrameRate:
          type: integer
          format: int32
        durationInMilliSeconds:
          type: integer
          format: int64
    WorkflowVariable:
      type: object
      required:
        - Description
        - IsNull
        - Position
        - Type
        - Value
      properties:
        Description:
          type: string
          description: describe the variable
          example: Title of the Picture
        IsNull:
          type: boolean
        Position:
          type: integer
          format: int32
        Type:
          type: string
          enum: [string, integer, decimal, boolean, datetime, datetime-millisecs, jsonObject, jsonArray]
        Value:
          type: string
          description: the type of this 'Value' field really depends on the value of the previous 'Type' field
    WorkflowTask:
      type: object
      required:
        - Label
        - Type
        - Parameters
      properties:
        Label:
          type: string
          description: title of the workflow
        Type:
          type: string
          enum: [Add-Content, Remove-Content, Encode, Frame, Periodical-Frames, I-Frames, Motion-JPEG-by-Periodical-Frames, Motion-JPEG-by-I-Frames, Slideshow, Concat-Demuxer, Cut, Overlay-Image-On-Video, Overlay-Text-On-Video, FTP-Delivery, HTTP-Callback, Local-Copy, Extract-Tracks, Post-On-Facebook, Post-On-YouTube, Face-Recognition, Face-Identification, Live-Recorder, Change-File-Format, Video-Speed, Picture-In-Picture, Live-Proxy, Live-Cut, Live-Grid, Awaiting-The-Beginning, Intro-Outro-Overlay, VOD-Proxy, Email-Notification, Media-Cross-Reference, Workflow-As-Library, Check-Streaming, GroupOfTasks]
        Parameters:
          type: object
          additionalProperties: {}
    Workflow:
      type: object
      required:
        - Label
        - Type
        - Task
        - Variables
      properties:
        Label:
          type: string
          description: title of the workflow
        Type:
          type: string
          description: this is always 'Workflow'
        Task:
          $ref: '#/components/schemas/WorkflowTask'
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/WorkflowVariable'
    WorkflowLibrary:
      type: object
      required:
        - workflowLibraryKey
        - creatorUserKey
        - global
        - label
        - thumbnailMediaItemKey
        - variables
      properties:
        workflowLibraryKey:
          type: integer
          format: int64
        creatorUserKey:
          type: integer
          format: int64
        global:
          type: boolean
          example: true
        label:
          type: string
          example: Best Picture of the Video
        thumbnailMediaItemKey:
          type: integer
          format: int64
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/WorkflowVariable'
    Workspace:
      type: object
      required:
        - workspaceKey
        - workspaceName
        - creationDate
        - isEnabled
        - languageCode
        - maxStorageInMB
        - maxEncodingPriority
        - maxIngestionsNumber
        - encodingPeriod
        - workSpaceUsageInMB
        - userAPIKey
      properties:
        workspaceKey:
          type: integer
          format: int64
        workspaceName:
          type: string
        creationDate:
          type: string
          format: date-time
          example: '2021-04-08T20:28:33Z'
        isEnabled:
          type: boolean
          example: true
        languageCode:
          type: string
          example: it
        maxStorageInMB:
          type: integer
          format: int64
          example: 500000
        maxEncodingPriority:
          type: string
          example: Low
        maxIngestionsNumber:
          type: integer
          format: int64
          example: 20000
        encodingPeriod:
          type: string
          example: Daily
        workSpaceUsageInMB:
          type: integer
          format: int64
        userAPIKey:
          $ref: '#/components/schemas/UserAPIKey'
    YouTubeConf:
      type: object
      required:
        - confKey
        - label
        - tokenType
        - refreshToken
        - accessToken
      properties:
        confKey:
          type: integer
          format: int64
        label:
          type: string
        tokenType:
          type: string
          enum: [RefreshToken, AccessToken]
        refreshToken:
          type: string
        accessToken:
          type: string