{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Media Management Service REST API",
    "description" : "Media Management System REST API",
    "contact" : {
      "email" : "support@catramms-cloud.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.1"
  },
  "servers" : [ {
    "url" : "https://mms-api.catramms-cloud.com/catramms/1.0.1",
    "description" : "Media Management System on cloud (production)"
  }, {
    "url" : "https://mms-api-test.catramms-cloud.com/catramms/1.0.1",
    "description" : "Media Management System on cloud (staging)"
  }, {
    "url" : "https://mms-api.cibortv-mms.com/catramms/1.0.1",
    "description" : "Media Management System on CiborTV"
  } ],
  "security" : [ {
    "BasicAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "MMS User",
    "description" : "<ul><li>The steps to create a new User are<ol><li>register a new User (POST /user)<li>confirm the registration of the User (PUT /user/{userKey}/{confirmationCode})</ol><li>When a User is created, a new Workspace  (see next section) is also automatically created and associated to the User<li>The registration and confirmation APIs can be called without any authorization and they will provide you a userKey and an apiKey<li>The apiKey is an alphanumeric string associated to the couple User-Workspace<li>Use the userKey as username and the apikey as password to set the Basic Authorization (Authorize button) and call any other APIs</ul>"
  }, {
    "name" : "Workspace",
    "description" : "<img src=\"https://github.com/giulianoc/CatraMMS/raw/master/docs/User-Workspace.png\" alt=\"User Workspace\"><ul><li>A Workspace is the repository where all the media items, videos audios and images are saved<li>A User can create more Workspaces to have a logical separation of the media items<li>A User will have one apiKey for each Workspace<li>The apiKey is used as password into the authorization, so every API acts on one Workspace specified by the apiKey/authorization<li>A Workspace can also be shared with another User, so both are able to work with the same media items</ul>"
  }, {
    "name" : "mediaItems",
    "description" : "<ul><li>A media item<ul><li>can be a video, an audio or an image<li>can have any number of variants (multi bit rate, multi resolutions, ...)<li>can have one number of tags<li>can be published based on the startPublishing and endPublishing metadata<li>can have any custom metadata using a json format<li>has a retention and. if expired, is automatically removed<li>can have a reference to another media item. For example a video can have a reference 'CutOfVideo' towards the original video used for the cut. The actual Cross Reference Types are<ul><li>ImageOfVideo<li>VideoOfImage<li>ImageOfAudio<li>AudioOfImage<li>FaceOfVideo<li>CutOfVideo<li>CutOfAudio</ul></ul>"
  }, {
    "name" : "delivery",
    "description" : "<ul><li>A media item or a live content can be delivered only if it is authorized<li>The APIs in this section allow you to create an authorization for the specified media items and provides you a 'tokenized' URL for the delivery</ul>"
  }, {
    "name" : "workflow",
    "description" : "<img src=\"https://github.com/giulianoc/CatraMMS/raw/master/docs/WorkflowEditor.png\" alt=\"Workflow Editor\"><ul><li>A workflow is a sequence of Tasks involved in moving from the beginning to the end of a working process<li>A Task inherits by default as input the output of his parent. For example, if we have a Concat task and, on success, the Encode task, the Encode Task will inherit authomatically the 'concatenated' media item  output of his parent Concat Task<li>A Task can be executed based on the status of his parent Task. Possible status are<ul><li>onSuccess<li>onFailure<li>onComplete</ul><li>Here follows the Tasks defined by the MMS platform in alphabetical order<ul><li><b>Add-Content</b>, it adds a new content into the MMS Workspace. It supports two options<ul><li><b>pull</b>, the binary of the content is downloaded by the MMS through a url provided by the User. Protocols supported are http, https, ftp, ftps<li><b>push</b>, the binary of the content is uploaded calling the appropriate API</ul><li><b>Awaiting-The-Beginning</b>, it generates a live video based on a Picture provided as input and showes the picture with a countdown up to the beginning of the event. The live video can be delivered to a CDN or through a live HLS format<li><b>Change-File-Format</b>, it generates a new media item having the new format. No re-encoding is done, just change the format/container<li><b>Check-Streaming</b>, it verifies if the streaming specified by a URL provided as input is working<li><b>Concat-Demuxer</b>, it generates a new media item as concatenation of videos having same codecs<li><b>Cut</b>, it generates a new media item as cut of a video-audio<li><b>Encode</b>, it generates one or more new variants of an existing media item using a profile or set of profiles provided as input<li><b>Extract-Tracks</b>, it generates a new media item with the extraction of tracks of a media item provided as input<li><b>Email-Notification</b>, it sends an email<li><b>Face-Identification</b>, it generates a new video (an avi video using h264 as codec without audio) that it is a copy of the provided input video where all the faces are highlighted with a circle or a rectangle having the name of the identified face. it receives a list of tags to be used as filter to select images inside the MMS to be used to train the deep learned model to identify the face inside a video<li><b>Face-Recognition</b>, it receives a video as input and generates, depending on the Output parameter<ul><li>another video (an avi video using h264 as codec without audio) that it is a copy of the input video where all the faces are highlighed with a circle or a rectangle<li>an image for each face met inside the input video. All these ingested images could be used to train the deep learned model to identify (so not just recognize) the face inside a video. In this scenario, it is possible to tag all the images ingested and use them in the FaceIdentification Task to identify the faces</ul><li><b>Frame</b>, it generates a jpg image that it is a Frame from a video<li><b>FTP-Delivery</b>, it uploads the media item on a ftp site<li><b>GroupOfTasks</b>, it is a special Task used when the Workflow has to execute a list of Tasks in parallel or sequentially<li><b>HTTP-Callback</b>, it calls an HTTP, any HTTP method, defined by the Task parameters<li><b>I-Frames</b>, it generates all the I-Frames of a video and add them into MMS<li><b>Intro-Outro-Overlay</b>, it generates a video that is the composition of the intro, main and outro videos<img src=\"https://github.com/giulianoc/CatraMMS/raw/master/docs/TASK_39_Intro_Outro_Overlay.png\" alt=\"Intro_Outro_Overlay\"/><ul><li>The last part of the intro video is overlayed with the initial part of the main video<li>The initial part of the outro video is overlayed with the last part of the main video<li>Generally the intro and outro videos have an alpha component (transparency) that is used during the overlay. This is used to implement a 'transition' from the intro video to the main video and from the main video to the outro video<li>The intro and outro videos may contain an alpha component to be transparent during the overlay with the main video<li>This task will mute (default behavior) the audio of the intro and outro videos during the overlay</ul><li><b>Live-Cut</b>, it generates a video as a cut from a live feed. In order to make the Live-Cut working fine, it is supposed that a Live-Recorder task is or has been active on the same live feed. Internally, the Live-Cut Task generates a new Workflow to concatenate all the chunks needed and then performs a cut generating a new Media Item<li><b>Live-Grid</b>, it receives a list of live streaming as input and generates one live content as output that it is a composition of the input live streaming. The new output live streaming can be delivered using the HLS protocol<li><b>Live-Proxy</b>, it gets a live feed as input and proxy it to a CDN or generates a live content that is able to be delivered as an HLS format<li><b>Live-Recorder</b>, it records a live feed and generates periodically chunks (media items) of a specified duration (i.e. 60 seconds). The same feed can be provided as output to several destination<li><b>Local-Copy</b>, it is used for custom use cases<li><b>Media-Cross-Reference</b>, it generates a cross reference between two media items. It is a kind of link between two media items. For example, a link could be 'imageOfVideo' to join a video and his image/thumbnail. The Cross Reference allows you to navigate from one video to another<li><b>Motion-JPEG-by-I-Frames</b>, it generates a Motion JPEG video by the I-Frames of the video<li><b>Motion-JPEG-by-Periodical-Frames</b>, it generates a Motion JPEG video by periodical Frames of the video<li><b>Overlay-Image-On-Video</b>, it generates a video overlaying an Image on top of a video both provided as input<li><b>Overlay-Text-On-Video</b>, it generates a video overlaying a text on top of a video both provided as input<li><b>Periodical-Frames</b>, it generates periodical frames from a video provided as input<li><b>Picture-In-Picture</b>, it generates a video overlaing a video on another video both received as input<li><b>Post-On-Facebook</b>, it Post a media item on Facebook<li><b>Post-On-YouTube</b>, it Post a media item on YouTube<li><b>Remove-Content</b>, it removes one or more media items from MMS<li><b>Slideshow</b>, it generates a Slideshow video (mp4 file) using images media items provided as input<li><b>Video-Speed</b>, it generates a new video speeding up or slowing down a provided input video<li><b>VOD-Proxy</b>, it generates a live content starting from one or more VODs media items. The live content can be proxied to a CDN or delivered it through a live HLS delivery<li><b>YouTube-Live-Broadcast</b>, it creates a live event on YouTube feeding it with a live feed or a VOD sent continuously (loop)</ul></ul>"
  }, {
    "name" : "encoding",
    "description" : "<ul><li>An EncodingJob is an activity that has to be done by the Encoder, i.e. an encoding of a video or the generation of a SlideShow video, ...<li>Each EncodingJob has a Priority field used to determine the execution order<li>Next APIs will allow you<ul><li>to know all the running EncodingJobs based on all the Encoders or on a specific Encoder<li>to know the EncodingJobs that are in the queue waiting a free Encoder to be executed<li>to kill a running EncodingJob<li>to cancel an EncodingJob from the queue<li>to change the Priority of an EncodingJob<li>to execute again the encoding</ul></ul>"
  }, {
    "name" : "workflowAsLibrary",
    "description" : "<ul><li>A 'Workflow As Library' is a Workflow that is registered into MMS and can be used as an Elementary Task in another Workflow<li>Let s explain it doing an example<ul><li>assume we have a Workflow retrieving the best Picture from a video<li>this workflow is composed by several Tasks<ul><li>a Task looking for Faces into the Video<li>if it does not find any face (OnError event), there is another Task getting a Picture at a specified instance (i.e. 30 seconds since the starting of the Video)<li>then we have the encoding of the Picture<li>and so on</ul><li>let s call this Workflow as 'Best Picture Of a Video'<li>now, let s assume we have another Workflow registering a live feed and generating a chunk (video media item) every 60 seconds<li>we want to have a picture for every chunk generated during the registration<li>to achieve this, we will register the 'Best Picture Of a Video' Workflow into the MMS as 'Workflow As Library'<li>then we use it into the new Workflow as we usually do with any Elementary Task</ul>"
  }, {
    "name" : "encodingProfiles",
    "description" : "<ul><li>A media item (video, audio or image) can be encoded using one or more profiles<li>There are several Predefined Encoding Profiles defined by the MMS system, however a User can define new encoding profiles<li>It is possible to add a single encoding profile as well as a set of profiles and apply the entire set of profiles to one content using just one Task</ul>"
  }, {
    "name" : "channels",
    "description" : "<ul><li>A channel represents a live feed<li>A property of the channel is 'sourceType' that identifies the type of the channel<ul><li>IP_PULL, the live feed is retrieved by the MMS through a URL (srt, rtmp, http, ...). In this scenario MMS is a client and the host of the URL is a server<li>IP_PUSH, the live feed is pushed to the MMS that is listenning on a specified IP/Port. In this scenario MMS is a server and the host pushing the live feed is the client<li>CaptureLive, the MMS retrieve the live feed through a Capture device (capture card, HDMI, ...)<li>Satellite, the MMS retrieve the feed from the satellite</ul><li>A channel can have any custom metadata using a json format</ul>"
  }, {
    "name" : "cdn",
    "description" : "<ul><li>This section describes the APIs to configure a CDN<li>MMS works with several CDNs<ul><li>CDN77<li>AWS</ul></ul>"
  }, {
    "name" : "social",
    "description" : "<ul><li>Social configuration contains the minimal data needed to MMS to post vod/live contents to YouTube or Facebook<li>The social configuration is used by the Post-On-Facebook, Post-On-YouTube and YouTube-Live-Broadcast Tasks</ul>"
  }, {
    "name" : "ftp",
    "description" : "<ul><li>FTP configuration contains FTP accounts details to allow MMS to copy a contents to an FTP server. For example, inside the Workflow, on success of an encoding, the encoded file has to be copied to an FTP server<li>The FTP configuration is used by the FTP-Delivery Task</ul>"
  }, {
    "name" : "email",
    "description" : "<ul><li>Email configuration contains email details to allow MMS to send email. For example, inside the Workflow, on failure of a Task you could send an email to inform the support team of this failure<li>The Email configuration is used by the Email-Notification Task</ul>"
  }, {
    "name" : "encoder",
    "description" : "<ul><li>This section contains APIs to add/remove encoders to the MMS platform and associate them to workspaces. Most of this APIs require the 'admin' priviledge<li>This section contains also encodersPool APIs, they are used to group encoders. These APIs do not need the 'admin' priviledge to be executed<li>The EncodersPool can be specified inside the Task and, in this case, the MMS will perform a balancing among all the encoders included into the EncodersPool</ul>"
  } ],
  "paths" : {
    "/user" : {
      "put" : {
        "tags" : [ "MMS User" ],
        "summary" : "update of a User metadata",
        "description" : "This API updates the User metadata",
        "operationId" : "updateUser",
        "requestBody" : {
          "description" : "User fields to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "User updated successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "MMS User" ],
        "summary" : "register a new User",
        "description" : "This API registers a new User into the MMS platform and creates his default Workspace.",
        "operationId" : "registerUser",
        "requestBody" : {
          "description" : "User for Registration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "User registered and Workspace created successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "500" : {
            "description" : "internal server error"
          }
        },
        "security" : [ ]
      }
    },
    "/user/{userKey}/{confirmationCode}" : {
      "put" : {
        "tags" : [ "MMS User" ],
        "summary" : "confirm the registration of the User",
        "description" : "confirm the registration of the User",
        "operationId" : "confirmRegistration",
        "parameters" : [ {
          "name" : "userKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "confirmationCode",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "it returns the api-key",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_201_1"
                }
              }
            }
          },
          "500" : {
            "description" : "internal server error"
          }
        },
        "security" : [ ]
      }
    },
    "/login" : {
      "post" : {
        "tags" : [ "MMS User" ],
        "summary" : "receive email and password as input and return the apiKey in case the email and password are correct (used generally in case of a generic GUI client)",
        "description" : "This API allows the User to login into the MMS platform. As input User and password, the output will be the api-key associated to the User default Workspace",
        "operationId" : "login",
        "requestBody" : {
          "description" : "User details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/login_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "login done successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserAndWorkspace"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "500" : {
            "description" : "internal server error"
          }
        },
        "security" : [ ]
      }
    },
    "/status" : {
      "get" : {
        "tags" : [ "MMS User" ],
        "summary" : "status of the API service",
        "description" : "Provide the status of the MMS API service",
        "operationId" : "statusAPI",
        "responses" : {
          "200" : {
            "description" : "API service is up and running",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "500" : {
            "description" : "API service is NOT up and running"
          }
        },
        "security" : [ ]
      }
    },
    "/support" : {
      "post" : {
        "tags" : [ "MMS User" ],
        "summary" : "request for support",
        "description" : "in case of any issue/question about MMS, this API allows you to ask support to the MMS team",
        "operationId" : "mmsSupport",
        "requestBody" : {
          "description" : "Support request details:",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Support"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "support was submitted"
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workspace" : {
      "get" : {
        "tags" : [ "Workspace" ],
        "summary" : "list all the Workspaces of the User, own and shared Workspaces",
        "description" : "list all the Workspaces of a User, own and shared Workspaces",
        "operationId" : "workspaceList",
        "responses" : {
          "200" : {
            "description" : "list of all the Workspaces",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_1"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "Workspace" ],
        "summary" : "update of a Workspace metadata",
        "description" : "This API updates the Workspace metadata. Only the owner of the Workspace or the admin are able to do the update. Here follows the list of the fields that can be updated<ul><li>workspaceName<li>isEnabled (only admin)<li>languageCode<li>maxStorageInMB (only admin)<li>maxEncodingPriority (only admin)<li>maxIngestionsNumber (only admin)<li>encodingPeriod (only admin)<li>expirationDate (only admin)<li>applicationRecorder<li>cancelIngestionJob<li>createProfiles<li>createRemoveWorkspace<li>deliveryAuthorization<li>editConfiguration<li>editEncodersPool<li>editMedia<li>ingestWorkflow<li>killEncoding<li>shareWorkspace</ul>",
        "operationId" : "updateWorkspace",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Workspace"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Workspace updated successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Workspace"
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "Workspace" ],
        "summary" : "create a new Workspace",
        "description" : "This API registers a new Workspace into the MMS platform. It can be executed only by a User having the createRemoveWorkspace or admin priviledge",
        "operationId" : "registerWorkspace",
        "parameters" : [ {
          "name" : "workspaceName",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Workspace details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/workspace_body"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Workspace created successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Workspace" ],
        "summary" : "delete the Workspace",
        "description" : "delete the Workspace identified by the apikey (http basic authentication password). If the owner will remain without any other Workspace, the User will be automatically removed too. It can be executed only by a User having the createRemoveWorkspace or admin priviledge.",
        "operationId" : "deleteWorkspace",
        "responses" : {
          "200" : {
            "description" : "Workspace deleted successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workspace-encoder/{workspaceKey}/{encoderKey}" : {
      "post" : {
        "tags" : [ "encoder" ],
        "summary" : "associate the encoder to the Workspace",
        "description" : "This API associates the encoder to a Workspace. It can be executed only by a User having the admin priviledge",
        "operationId" : "workspaceEncoderAssociation",
        "parameters" : [ {
          "name" : "workspaceKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "encoderKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "association Workspace-encoder created successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_2"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "encoder" ],
        "summary" : "delete the association Workspace-encoder",
        "description" : "delete the association Workspace-encoder. It can be executed only by a User having the admin priviledge",
        "operationId" : "deleteWorkspaceEncoder",
        "parameters" : [ {
          "name" : "workspaceKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "encoderKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "association Workspace-encoder deleted successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_2"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "403" : {
            "description" : "APIKey does not have the admin permission"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workspace/share" : {
      "put" : {
        "tags" : [ "Workspace" ],
        "summary" : "share the Workspace with another User",
        "description" : "This API shares a Workspace with a User already present or a new User.  It can be executed only by a User having the shareWorkspace or admin priviledge.",
        "operationId" : "shareWorkspace",
        "parameters" : [ {
          "name" : "userAlreadyPresent",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "createRemoveWorkspace",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "ingestWorkflow",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "createProfiles",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "deliveryAuthorization",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "shareWorkspace",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "editMedia",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "editConfiguration",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "killEncoding",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "cancelIngestionJob",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "editEncodersPool",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "applicationRecorder",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "Just the 'email' if userAlreadyPresent is true, all the fields but 'workspaceName' if userAlreadyPresent is false",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Workspace shared successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workspace/usage" : {
      "get" : {
        "tags" : [ "Workspace" ],
        "summary" : "return the storage used by the Workspace",
        "description" : "return the storage used by the Workspace",
        "operationId" : "workspaceUsage",
        "responses" : {
          "200" : {
            "description" : "storage usage calculated successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_3"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encoder" : {
      "get" : {
        "tags" : [ "encoder" ],
        "summary" : "list all the encoders associated to the Workspace",
        "description" : "return all the encoders associated to the Workspace (current api-key). Only in case of admin, it is possible to ask for all the encoders available into the MMS platform or the encoder for a specific Workspace (different from the one associated to the api-key)",
        "operationId" : "encoderList",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serverName",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "port",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "labelOrder",
          "in" : "query",
          "description" : "asc or desc",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "runningInfo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "allEncoders",
          "in" : "query",
          "description" : "only in case of User with admin priviledge",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "workspaceKey",
          "in" : "query",
          "description" : "only in case of User with admin priviledge",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of the encoders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_4"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "encoder" ],
        "summary" : "add a new encoder",
        "description" : "This API adds a new encoder into the MMS platform. It can be executed only by a User having the admin priviledge.",
        "operationId" : "addEncoder",
        "requestBody" : {
          "description" : "Encoder details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/encoder_body"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Workspace created successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Encoder"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encoder/{encoderKey}" : {
      "get" : {
        "tags" : [ "encoder" ],
        "summary" : "get encoder details",
        "description" : "return the encoder details identified by the encoderKey parameter",
        "operationId" : "encoderDetails",
        "parameters" : [ {
          "name" : "encoderKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoder details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_4"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "encoder" ],
        "summary" : "update of the Encoder metadata",
        "description" : "This API updates the Encoder metadata. It can be executed only by a User having the admin priviledge.",
        "operationId" : "updateEncoder",
        "parameters" : [ {
          "name" : "encoderKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Encoder fields to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Encoder"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "encoder updated successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/encoder_body"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "encoder" ],
        "summary" : "remove the Encoder",
        "description" : "delete the Encoder identified by the encoderKey parameter. It can be executed only by a User having the admin priviledge.",
        "operationId" : "deleteEncoder",
        "parameters" : [ {
          "name" : "encoderKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoder deleted successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodersPool" : {
      "get" : {
        "tags" : [ "encoder" ],
        "summary" : "list all the encodersPool associated to the Workspace",
        "description" : "return all the encodersPool associated to the Workspace (current api-key).",
        "operationId" : "encodersPoolList",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "labelOrder",
          "in" : "query",
          "description" : "asc or desc",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of the encodersPool",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_5"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "encoder" ],
        "summary" : "add a new encodersPool",
        "description" : "This API adds a new encodersPool into the MMS platform. It can be executed only by a User having the editEncodersPool or admin priviledge",
        "operationId" : "addEncodersPool",
        "requestBody" : {
          "description" : "EncodersPool details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/encodersPool_body"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "encodersPool created successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_201_2"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodersPool/{encodersPoolKey}" : {
      "get" : {
        "tags" : [ "encoder" ],
        "summary" : "get encodersPool details",
        "description" : "return the encodersPool details identified by the encodersPoolKey parameter",
        "operationId" : "encodersPoolDetails",
        "parameters" : [ {
          "name" : "encodersPoolKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encodersPool details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_5"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "encoder" ],
        "summary" : "update of the EncodersPool metadata",
        "description" : "This API updates the EncodersPool metadata. It can be executed only by a User having the editEncodersPool or admin priviledge",
        "operationId" : "updateEncodersPool",
        "parameters" : [ {
          "name" : "encodersPoolKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "EncodersPool fields to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EncodersPool"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "encodersPool updated successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_6"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "encoder" ],
        "summary" : "remove the EncodersPool",
        "description" : "delete the EncodersPool identified by the encodersPoolKey parameter. It can be executed only by a User having the editEncodersPool or admin priviledge",
        "operationId" : "deleteEncodersPool",
        "parameters" : [ {
          "name" : "encodersPoolKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encodersPool deleted successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workflowAsLibrary" : {
      "get" : {
        "tags" : [ "workflowAsLibrary" ],
        "summary" : "list all the workflow libraries",
        "description" : "return all the workflow libraries associated to the Workspace (current api-key).",
        "operationId" : "workflowAsLibraryList",
        "responses" : {
          "200" : {
            "description" : "list of the workflow libraries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_7"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "workflowAsLibrary" ],
        "summary" : "add/update the workflow library",
        "description" : "This API add or updates the library of workflow. The body contains the workflow and his label is the identifier of the workflow",
        "operationId" : "updateWorkflowAsLibrary",
        "requestBody" : {
          "description" : "Workflow to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Workflow"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "encodersPool updated successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_6"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workflowAsLibrary/{workflowLibraryKey}" : {
      "get" : {
        "tags" : [ "workflowAsLibrary" ],
        "summary" : "get the workflow library details",
        "description" : "return the workflow of the library identified by workflowLibraryKey",
        "operationId" : "workflowAsLibraryContent",
        "parameters" : [ {
          "name" : "workflowLibraryKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "workflow of the library",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Workflow"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "workflowAsLibrary" ],
        "summary" : "remove the workflow library",
        "description" : "delete the workflow library identified by the workflowLibraryKey parameter",
        "operationId" : "deleteWorkflowLibrary",
        "parameters" : [ {
          "name" : "workflowLibraryKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "workflow library deleted successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workflow" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "list of ingested workflows",
        "description" : "return the list of workflows meeting the input filter parameters",
        "operationId" : "ingetionRootsList",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "mediaItemKey",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "startIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "endIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "All", "NotCompleted", "CompletedSuccessful", "CompletedWithFailures" ]
          }
        }, {
          "name" : "asc",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "ingestionJobOutputs",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of the workflow",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_8"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "workflow" ],
        "summary" : "add a new workflow to be executed",
        "description" : "This API add a new workflow to be executed. It can be executed only by a User having the ingestWorkflow or admin priviledge",
        "operationId" : "addWorkflow",
        "requestBody" : {
          "description" : "Workflow to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Workflow"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "details/identifiers about every single job belonging to the workflow",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_201_3"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workflow/{ingestionRootKey}" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "get the ingested workflow details",
        "description" : "get the ingested workflow details",
        "operationId" : "ingetionRootDetails",
        "parameters" : [ {
          "name" : "ingestionRootKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "workflow details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_8"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/workflow/metaDataContent/{ingestionRootKey}" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "get the workflow content by a json format",
        "description" : "get the workflow content",
        "operationId" : "ingetionRootMetadataContent",
        "parameters" : [ {
          "name" : "ingestionRootKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "processedMetadata",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "workflow content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : { }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/ingestionJob" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "list all the ingested jobs",
        "description" : "return the list of ingestion jobs meeting the input filter parameters",
        "operationId" : "ingetionJobsList",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "endIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "ingestionType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Add-Content", "Remove-Content", "Encode", "Frame", "Periodical-Frames", "I-Frames", "Motion-JPEG-by-Periodical-Frames", "Motion-JPEG-by-I-Frames", "Slideshow", "Concat-Demuxer", "Cut", "Overlay-Image-On-Video", "Overlay-Text-On-Video", "FTP-Delivery", "HTTP-Callback", "Local-Copy", "Extract-Tracks", "Post-On-Facebook", "Post-On-YouTube", "Face-Recognition", "Face-Identification", "Live-Recorder", "Change-File-Format", "Video-Speed", "Picture-In-Picture", "Live-Proxy", "Live-Cut", "Live-Grid", "Awaiting-The-Beginning", "Intro-Outro-Overlay", "VOD-Proxy", "Email-Notification", "Media-Cross-Reference", "Workflow-As-Library", "Check-Streaming", "ContentUpdate", "ContentRemove", "GroupOfTasks", "YouTube-Live-Broadcast" ]
          }
        }, {
          "name" : "asc",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "ingestionJobOutputs",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "jsonParametersCondition",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "all", "notCompleted", "completed" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of the ingestion jobs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_9"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/ingestionJob/{ingestionJobKey}" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "get the ingested job details",
        "description" : "get ingested job details",
        "operationId" : "ingetionJobDetails",
        "parameters" : [ {
          "name" : "ingestionJobKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ingestion job details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_9"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "workflow" ],
        "summary" : "update the IngestionJob metadata",
        "description" : "This API updates the IngestionJob metadata. It is possible to update the IngestionJob metadata only in case his status is Start_TaskQueued and his type is LiveRecorder. In this scenario it is possible to change the ingestion job label and/or the channel label and/or the recording period start and/or the recording period end and/or the recording virtual vod. It can be executed only by a User having the editMedia or admin priviledge",
        "operationId" : "updateIngestionJob",
        "parameters" : [ {
          "name" : "ingestionJobKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "IngestionJob fields to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ingestionJob_ingestionJobKey_body"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ingestion job updated successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_10"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "workflow" ],
        "summary" : "cancel the ingestion job",
        "description" : "cancel the ingestion job identified by the ingestionJobKey parameter. It can be executed only by a User having the cancelIngestionJob or admin priviledge",
        "operationId" : "cancelIngestionJob",
        "parameters" : [ {
          "name" : "ingestionJobKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "forceCancel",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ingestion job deleted successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/mediaItem" : {
      "get" : {
        "tags" : [ "mediaItems" ],
        "summary" : "list all media items metadata",
        "description" : "This API lists media items (contents) meeting the query filter parameters",
        "operationId" : "listMediaItemsWithoutTagsFilter",
        "parameters" : [ {
          "name" : "mediaItemKey",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "uniqueName",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "physicalPathKey",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "contentType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          }
        }, {
          "name" : "liveRecordingChunk",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "startIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "endIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "title",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recordingCode",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jsonCondition",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jsonOrderBy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list media items details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_11"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "mediaItems" ],
        "summary" : "list all the media items metadata. It is a POST because the body could contain a filter about the tags",
        "description" : "This API list media items (contents) meeting the query filter parameters. The body could contain a filter about the tags.",
        "operationId" : "listMediaItemsWithTagsFilter",
        "parameters" : [ {
          "name" : "mediaItemKey",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "uniqueName",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "physicalPathKey",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "contentType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          }
        }, {
          "name" : "liveRecordingChunk",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "startIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "endIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "title",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recordingCode",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jsonCondition",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jsonOrderBy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "optional input filter for tags. Json format: { \"tagsIn\": [\"xxx\", \"yyy\"], \"tagsNotIn\": [], \"otherMediaItemsKey\": [] }",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/mediaItem_body"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "list media items details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_11"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/mediaItem/{mediaItemKey}" : {
      "get" : {
        "tags" : [ "mediaItems" ],
        "summary" : "get the media item metadata specified by the path parameter mediaItemKey",
        "description" : "This API gets the media item meeting the path parameter mediaItemKey",
        "operationId" : "listMediaItem",
        "parameters" : [ {
          "name" : "mediaItemKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list media items details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_11"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Json field is not present or it is null"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "mediaItems" ],
        "summary" : "update the media item metadata",
        "description" : "This API update media item. It can be executed only by a User having the editMedia or admin priviledge",
        "operationId" : "updateMediaItemDetails",
        "parameters" : [ {
          "name" : "mediaItemKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "optional input filter for tags",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/mediaItem_mediaItemKey_body"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "media item details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_11"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/mediaItem/{mediaItemKey}/{physicalPathKey}" : {
      "put" : {
        "tags" : [ "mediaItems" ],
        "summary" : "update the physical path metadata",
        "description" : "This API updates physical path metadata. It can be executed only by a User having the editMedia or admin priviledge",
        "operationId" : "updatePhysicalPathDetails",
        "parameters" : [ {
          "name" : "mediaItemKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "physicalPathKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "optional input filter for tags",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/mediaItemKey_physicalPathKey_body"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "physical path details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_11"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/tag" : {
      "get" : {
        "tags" : [ "mediaItems" ],
        "summary" : "list all the tags used by the media items",
        "description" : "This API lists tags meeting the input filter parameters",
        "operationId" : "listTags",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "contentType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          }
        }, {
          "name" : "tagNameFilter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "liveRecordingChunk",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list tags",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_12"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodingJob" : {
      "get" : {
        "tags" : [ "encoding" ],
        "summary" : "list all the encoding jobs",
        "description" : "return the list of encoding jobs meeting the input filter parameters",
        "operationId" : "encodingJobsList",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "startIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "endIngestionDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "startEncodingDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "endEncodingDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          }
        }, {
          "name" : "encoderKey",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "alsoEncodingJobsFromOtherWorkspaces",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "asc",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "All", "Completed", "Processing", "ToBeProcessed" ]
          }
        }, {
          "name" : "types",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "it is possible to have also more than one type comma separated",
            "enum" : [ "EncodeVideoAudio", "EncodeImage", "OverlayImageOnVideo", "OverlayTextOnVideo", "GenerateFrames", "SlideShow", "FaceRecognition", "FaceIdentification", "LiveRecorder", "VideoSpeed", "PictureInPicture", "LiveProxy", "LiveGrid", "AwaitingTheBeginning", "IntroOutroOverlay", "CutFrameAccurate", "VODProxy" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of the encoding jobs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_13"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodingJob/{encodingJobKey}" : {
      "get" : {
        "tags" : [ "encoding" ],
        "summary" : "get the encoding job details",
        "description" : "get encoding job details",
        "operationId" : "encodingJobDetails",
        "parameters" : [ {
          "name" : "encodingJobKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoding job details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_14"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "encoding" ],
        "summary" : "update the EncodingJob metadata",
        "description" : "This API updates the encoding priority of an encoding job or, if the tryEncodingAgain query parameter is true, re-try again the encoding.",
        "operationId" : "updateEncodingJob",
        "parameters" : [ {
          "name" : "encodingJobKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "newEncodingJobPriorityCode",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tryEncodingAgain",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoding job updated successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "encoding" ],
        "summary" : "remove/kill the EncodingJob",
        "description" : "This API remove if not started or kill if it is running the encoding job. It can be executed only by a User having the killEncoding or admin priviledge",
        "operationId" : "removeEncodingJob",
        "parameters" : [ {
          "name" : "encodingJobKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoding job removed/killed successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodingProfile/{encodingProfileKey}" : {
      "get" : {
        "tags" : [ "encodingProfiles" ],
        "summary" : "get the encoding profile details identified by encodingProfileKey",
        "description" : "get encoding profile details",
        "operationId" : "encodingProfileDetails",
        "parameters" : [ {
          "name" : "encodingProfileKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "contentType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          }
        }, {
          "name" : "label",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoding profile details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_15"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "encodingProfiles" ],
        "summary" : "delete the encoding profile",
        "description" : "delete encoding profile. It can be executed only by a User having the createProfiles or admin priviledge",
        "operationId" : "deleteEncodingProfile",
        "parameters" : [ {
          "name" : "encodingProfileKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoding profile removed successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodingProfilesSet/{encodingProfilesSetKey}" : {
      "get" : {
        "tags" : [ "encodingProfiles" ],
        "summary" : "get the encoding profiles set details identified by encodingProfilesSetKey",
        "description" : "get encoding profiles set details",
        "operationId" : "encodingProfilesSetDetails",
        "parameters" : [ {
          "name" : "encodingProfilesSetKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "contentType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoding profiles set details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_16"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "encodingProfiles" ],
        "summary" : "delete the encoding profiles set",
        "description" : "delete encoding profiles set. It can be executed only by a User having the createProfiles or admin priviledge",
        "operationId" : "deleteEncodingProfilesSet",
        "parameters" : [ {
          "name" : "encodingProfilesSetKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "encoding profiles set removed successful"
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodingProfilesSet" : {
      "put" : {
        "tags" : [ "encodingProfiles" ],
        "summary" : "add/update the encoding profiles set",
        "description" : "add/update encoding profiles set. It can be executed only by a User having the createProfiles or admin priviledge",
        "operationId" : "addEncodingProfilesSet",
        "parameters" : [ {
          "name" : "contentType",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          }
        } ],
        "requestBody" : {
          "description" : "encoding profiles set details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/encodingProfilesSet_body"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "encoding profiles set details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_17"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/encodingProfile" : {
      "put" : {
        "tags" : [ "encodingProfiles" ],
        "summary" : "add/update the encoding profile",
        "description" : "add/update encoding profile. It can be executed only by a User having the createProfiles or admin priviledge",
        "operationId" : "addEncodingProfile",
        "parameters" : [ {
          "name" : "contentType",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          }
        } ],
        "requestBody" : {
          "description" : "encoding profiles set details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EncodingProfileBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "encoding profile details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/encodingProfilesSet_encodingProfilesSet_encodingProfilesSet"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/delivery/vod/{physicalPathKey}" : {
      "get" : {
        "tags" : [ "delivery" ],
        "summary" : "create a VOD delivery authorization and return an authorized delivery URL",
        "description" : "create a VOD delivery authorization. It can be executed only by a User having the deliveryAuthorization or admin priviledge",
        "operationId" : "createVODDeliveryAuthorization",
        "parameters" : [ {
          "name" : "physicalPathKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "ttlInSeconds",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "maxRetries",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "save",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "authorizationThroughPath",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "redirect",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "authorization details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_201_4"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/delivery/live/{ingestionJobKey}" : {
      "get" : {
        "tags" : [ "delivery" ],
        "summary" : "create a LIVE delivery authorization and return an authorized delivery URL",
        "description" : "create a LIVE delivery authorization. It can be executed only by a User having the deliveryAuthorization or admin priviledge",
        "operationId" : "createLIVEDeliveryAuthorization",
        "parameters" : [ {
          "name" : "ingestionJobKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "ttlInSeconds",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "maxRetries",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "authorizationThroughPath",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "redirect",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "authorization details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_201_4"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/delivery/bulk" : {
      "post" : {
        "tags" : [ "delivery" ],
        "summary" : "create a bulk of delivery authorizations and one authorized delivery URL for each media specified by the bulk",
        "description" : "create a bulk of delivery authorizations. It can be executed only by a User having the deliveryAuthorization or admin priviledge",
        "operationId" : "createBulkDeliveryAuthorization",
        "parameters" : [ {
          "name" : "ttlInSeconds",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "maxRetries",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "authorizationThroughPath",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "request authorizations details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/delivery_bulk_body"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "authorizations request details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_18"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/youtube" : {
      "get" : {
        "tags" : [ "social" ],
        "summary" : "list all youTube configuration",
        "description" : "list all youTube configuration",
        "operationId" : "listYouTubeConfiguration",
        "responses" : {
          "200" : {
            "description" : "youTube configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_19"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "social" ],
        "summary" : "add a youTube configuration",
        "description" : "add a youTube configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "addYouTubeConfiguration",
        "requestBody" : {
          "description" : "youTube configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/YouTubeConf"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "youTube configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/YouTubeConf"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/youtube/{confKey}" : {
      "put" : {
        "tags" : [ "social" ],
        "summary" : "update a youTube configuration",
        "description" : "update a youTube configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "modifyYouTubeConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "youTube configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/YouTubeConf"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "youTube configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/YouTubeConf"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "social" ],
        "summary" : "delete a youTube configuration",
        "description" : "delete a youTube configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "deleteYouTubeConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "youTube configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/facebook" : {
      "get" : {
        "tags" : [ "social" ],
        "summary" : "list all facebook configuration",
        "description" : "list all facebook configuration",
        "operationId" : "listFacebookConfiguration",
        "responses" : {
          "200" : {
            "description" : "facebook configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_21"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "social" ],
        "summary" : "add a facebook configuration",
        "description" : "add a facebook configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "addFacebookConfiguration",
        "requestBody" : {
          "description" : "facebook configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/conf_facebook_body"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "facebook configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/facebook/{confKey}" : {
      "put" : {
        "tags" : [ "social" ],
        "summary" : "update a facebook configuration",
        "description" : "update a facebook configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "modifyFacebookConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "facebook configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/conf_facebook_body"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "facebook configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "social" ],
        "summary" : "delete a facebook configuration",
        "description" : "delete a facebook configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "deleteFacebookConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "facebook configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/channel" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "list all channels configuration",
        "description" : "list all channels configuration",
        "operationId" : "listChannelsConfiguration",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "IP_PULL", "IP_PUSH", "Satellite", "CaptureLive" ]
          }
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "country",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "labelOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_22"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "channels" ],
        "summary" : "add a channel configuration",
        "description" : "add a channel configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "addChannelConfiguration",
        "requestBody" : {
          "description" : "ip channel configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelConf"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChannelConf"
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/channel/{confKey}" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "get the channel configuration",
        "description" : "get the channel configuration",
        "operationId" : "channelConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_22"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "channels" ],
        "summary" : "update an channel configuration",
        "description" : "update an channel configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "modifyChannelConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "ip channel configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelConf"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ip channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChannelConf"
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "channels" ],
        "summary" : "delete an channel configuration",
        "description" : "delete a channel configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "deleteChannelConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/sourceSatChannel" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "list all source SAT channels configuration",
        "description" : "list all Source SAT channels configuration",
        "operationId" : "listSourceSATChannelsConfiguration",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lnb",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "frequency",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "videoPid",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "audioPids",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nameOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Source SAT channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_23"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "channels" ],
        "summary" : "add a Source SAT channel configuration",
        "description" : "add a Source SAT channel configuration. It can be executed only by a User having the admin priviledge",
        "operationId" : "addSourceSATChannelConfiguration",
        "requestBody" : {
          "description" : "Source SAT channel configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SourceSATChannelConf"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Source SAT channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/sourceSatChannel/{confKey}" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "get the Source SAT channel configuration",
        "description" : "get the Source SAT channel configuration",
        "operationId" : "sourceSatChannelConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "source SAT channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_23"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "channels" ],
        "summary" : "update a Source SAT channel configuration",
        "description" : "update a Source SAT channel configuration. It can be executed only by a User having the admin priviledge",
        "operationId" : "modifySourceSATChannelConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Source SAT channel configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SourceSATChannelConf"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Source SAT channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "channels" ],
        "summary" : "delete a Source SAT channel configuration",
        "description" : "delete a Source SAT channel configuration. It can be executed only by a User having the admin priviledge",
        "operationId" : "deleteSourceSATChannelConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Source SAT channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/cdn/cdn77/channel" : {
      "get" : {
        "tags" : [ "cdn" ],
        "summary" : "list all cdn77 configuration",
        "description" : "list all cdn77 configuration",
        "operationId" : "listCDNsConfiguration",
        "parameters" : [ {
          "name" : "label",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "cdn77 configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_24"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "cdn" ],
        "summary" : "add a cdn77 configuration",
        "description" : "add a cdn77 configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "addCDN77Configuration",
        "requestBody" : {
          "description" : "cdn77 configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CDN77Conf"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "cdn77 configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CDN77Conf"
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/cdn/cdn77/{confKey}" : {
      "put" : {
        "tags" : [ "cdn" ],
        "summary" : "update a CDN77 channel configuration",
        "description" : "update a CDN77 channel configuration. It can be executed only by a User having the admin priviledge",
        "operationId" : "modifyCDN77Configuration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "CDN77 configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CDN77Conf"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "CDN77 configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "cdn" ],
        "summary" : "delete a CDN77 channel configuration",
        "description" : "delete a CDN77 channel configuration. It can be executed only by a User having the admin priviledge",
        "operationId" : "deleteCDN77ChannelConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "CDN77 channel configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/ftp" : {
      "get" : {
        "tags" : [ "ftp" ],
        "summary" : "list all FTP configuration",
        "description" : "list all FTP configuration",
        "operationId" : "listFTPConfigurations",
        "responses" : {
          "200" : {
            "description" : "FTP configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_25"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "ftp" ],
        "summary" : "add a FTP configuration",
        "description" : "add a FTP configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "addFTPConfiguration",
        "requestBody" : {
          "description" : "FTP configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FTPConf"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "FTP configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/ftp/{confKey}" : {
      "get" : {
        "tags" : [ "ftp" ],
        "summary" : "list all FTP configuration",
        "description" : "list all FTP configuration",
        "operationId" : "listFTPConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "FTP configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_25"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "ftp" ],
        "summary" : "update a FTP configuration",
        "description" : "update a FTP configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "modifyFTPConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "FTP configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FTPConf"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ftp configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "ftp" ],
        "summary" : "delete a FTP configuration",
        "description" : "delete a FTP configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "deleteFTPConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "FTP configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/email" : {
      "get" : {
        "tags" : [ "email" ],
        "summary" : "list all EMail configuration",
        "description" : "list all EMail configuration",
        "operationId" : "listEMailConfigurations",
        "responses" : {
          "200" : {
            "description" : "EMail configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_26"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "email" ],
        "summary" : "add a EMail configuration",
        "description" : "add a EMail configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "addEMailConfiguration",
        "requestBody" : {
          "description" : "EMail configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EMailConf"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "EMail configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    },
    "/conf/email/{confKey}" : {
      "get" : {
        "tags" : [ "email" ],
        "summary" : "list all EMail configuration",
        "description" : "list all EMail configuration",
        "operationId" : "listEMailConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EMail configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_26"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "email" ],
        "summary" : "update a EMail configuration",
        "description" : "update a EMail configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "modifyEMailConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "EMail configuration details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EMailConf"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "EMail configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "email" ],
        "summary" : "delete an EMail configuration",
        "description" : "delete an EMail configuration. It can be executed only by a User having the editConfiguration or admin priviledge",
        "operationId" : "deleteEMailConfiguration",
        "parameters" : [ {
          "name" : "confKey",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EMail configuration details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_20"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "wrong basic authentication"
          },
          "500" : {
            "description" : "internal server error"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AudioTrack" : {
        "required" : [ "audioTrackKey", "bitRate", "channels", "codecName", "durationInMilliSeconds", "language", "sampleRate", "trackIndex" ],
        "type" : "object",
        "properties" : {
          "audioTrackKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "trackIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "durationInMilliSeconds" : {
            "type" : "integer",
            "format" : "int64"
          },
          "bitRate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "codecName" : {
            "type" : "string"
          },
          "sampleRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "channels" : {
            "type" : "integer",
            "format" : "int32"
          },
          "language" : {
            "type" : "string"
          }
        }
      },
      "CDN77Conf" : {
        "required" : [ "filePath", "label", "resourceURL", "rtmpURL", "type" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "rtmpURL" : {
            "type" : "string"
          },
          "resourceURL" : {
            "type" : "string"
          },
          "filePath" : {
            "type" : "string"
          },
          "secureToken" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "SHARED", "DEDICATED" ]
          },
          "outputIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reservedByIngestionJobKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "configurationLabel" : {
            "type" : "string"
          }
        }
      },
      "ChannelConf" : {
        "required" : [ "label", "sourceType" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "sourceType" : {
            "type" : "string",
            "enum" : [ "IP_PULL", "IP_PUSH", "Satellite", "CaptureLive" ]
          },
          "encodersPool" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "pushProtocol" : {
            "type" : "string"
          },
          "pushServerName" : {
            "type" : "string"
          },
          "pushServerPort" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pushUri" : {
            "type" : "string"
          },
          "pushListenTimeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "captureVideoDeviceNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "captureVideoInputFormat" : {
            "type" : "string"
          },
          "captureFrameRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "captureWidth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "captureHeight" : {
            "type" : "integer",
            "format" : "int32"
          },
          "captureAudioDeviceNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "captureChannelsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "satSourceSATConfKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "imageMediaItemKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "imageUniqueName" : {
            "type" : "string"
          },
          "position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "channelData" : {
            "type" : "object",
            "additionalProperties" : { }
          }
        }
      },
      "CrossReference" : {
        "required" : [ "parameters", "sourceMediaItemKey", "type" ],
        "type" : "object",
        "properties" : {
          "sourceMediaItemKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "ImageOfVideo", "ImageOfAudio", "FaceOfVideo", "CutOfVideo", "CutOfAudio" ]
          },
          "parameters" : {
            "type" : "string"
          }
        }
      },
      "Encoder" : {
        "required" : [ "cpuUsage", "enabled", "encoderKey", "external", "internalServerName", "label", "port", "protocol", "publicServerName", "running" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "example" : true
          },
          "encoderKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "external" : {
            "type" : "boolean",
            "example" : true
          },
          "label" : {
            "type" : "string",
            "example" : "encoder for channels"
          },
          "protocol" : {
            "type" : "string",
            "example" : "http"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 8088
          },
          "publicServerName" : {
            "type" : "string",
            "example" : "mms-t-transcoder-fr-1"
          },
          "internalServerName" : {
            "type" : "string",
            "example" : "mms-t-transcoder-fr-1"
          },
          "cpuUsage" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 10
          },
          "running" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "EncodersPool" : {
        "required" : [ "encoders", "encodersPoolKey", "label" ],
        "type" : "object",
        "properties" : {
          "encodersPoolKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string",
            "example" : "encodersPool for channels"
          },
          "encoders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Encoder"
            }
          }
        }
      },
      "EncodingJob" : {
        "required" : [ "encoderKey", "encodingJobKey", "encodingPid", "encodingPriority", "encodingPriorityCode", "end", "failuresNumber", "ingestionJobKey", "maxEncodingPriorityCode", "ownedByCurrentWorkspace", "parameters", "processorMMS", "progress", "start", "status", "type" ],
        "type" : "object",
        "properties" : {
          "encodingJobKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ingestionJobKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "EncodeVideoAudio", "EncodeImage", "OverlayImageOnVideo", "OverlayTextOnVideo", "GenerateFrames", "SlideShow", "FaceRecognition", "FaceIdentification", "LiveRecorder", "VideoSpeed", "PictureInPicture", "LiveProxy", "LiveGrid", "AwaitingTheBeginning", "IntroOutroOverlay", "CutFrameAccurate", "VODProxy" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ToBeProcessed", "Processing", "End_Success", "End_Failed", "End_KilledByUser", "End_CanceledByUser", "End_CanceledByMMS" ]
          },
          "start" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "end" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : { }
          },
          "progress" : {
            "type" : "integer",
            "format" : "int32"
          },
          "failuresNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "encodingPriority" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ]
          },
          "encodingPriorityCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxEncodingPriorityCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ownedByCurrentWorkspace" : {
            "type" : "boolean"
          },
          "processorMMS" : {
            "type" : "string"
          },
          "encoderKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "encodingPid" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ImageDetail" : {
        "required" : [ "format", "height", "quality", "width" ],
        "type" : "object",
        "properties" : {
          "width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "height" : {
            "type" : "integer",
            "format" : "int32"
          },
          "format" : {
            "type" : "string"
          },
          "quality" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IngestionJob" : {
        "required" : [ "downloadingProgress", "encodingJob", "endProcessing", "errorMessage", "ingestionJobKey", "ingestionRootKey", "ingestionType", "label", "mediaItems", "metaDataContent", "processingStartingFrom", "processorMMS", "startProcessing", "status", "uploadingProgress" ],
        "type" : "object",
        "properties" : {
          "ingestionJobKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ingestionRootKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Start_TaskQueued", "SourceDownloadingInProgress", "SourceMovingInProgress", "SourceCopingInProgress", "SourceUploadingInProgress", "EncodingQueued", "End_CanceledByUser", "End_CanceledByMMS", "End_ValidationMetadataFailed", "End_ValidationMediaSourceFailed", "End_WorkspaceReachedMaxStorageOrIngestionNumber", "End_IngestionFailure", "End_NotToBeExecuted", "End_NotToBeExecuted_ChunkNotSelected", "End_TaskSuccess" ]
          },
          "ingestionType" : {
            "type" : "string",
            "enum" : [ "Add-Content", "Remove-Content", "Encode", "Frame", "Periodical-Frames", "I-Frames", "Motion-JPEG-by-Periodical-Frames", "Motion-JPEG-by-I-Frames", "Slideshow", "Concat-Demuxer", "Cut", "Overlay-Image-On-Video", "Overlay-Text-On-Video", "FTP-Delivery", "HTTP-Callback", "Local-Copy", "Extract-Tracks", "Post-On-Facebook", "Post-On-YouTube", "Face-Recognition", "Face-Identification", "Live-Recorder", "Change-File-Format", "Video-Speed", "Picture-In-Picture", "Live-Proxy", "Live-Cut", "Live-Grid", "Awaiting-The-Beginning", "Intro-Outro-Overlay", "VOD-Proxy", "Email-Notification", "Media-Cross-Reference", "Workflow-As-Library", "Check-Streaming", "ContentUpdate", "ContentRemove", "GroupOfTasks" ]
          },
          "startProcessing" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "endProcessing" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "processingStartingFrom" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "encodingJob" : {
            "$ref" : "#/components/schemas/EncodingJob"
          },
          "downloadingProgress" : {
            "type" : "integer",
            "format" : "int32"
          },
          "errorMessage" : {
            "type" : "string"
          },
          "mediaItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MediaItem"
            }
          },
          "metaDataContent" : {
            "type" : "string"
          },
          "processorMMS" : {
            "type" : "string"
          },
          "uploadingProgress" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EMailConf" : {
        "required" : [ "addresses", "confKey", "label", "message", "subject" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "addresses" : {
            "type" : "string"
          },
          "subject" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "EncodingProfile" : {
        "required" : [ "contentType", "deliveryTechnology", "encodingProfileKey", "global", "label", "profile" ],
        "type" : "object",
        "properties" : {
          "encodingProfileKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "contentType" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          },
          "global" : {
            "type" : "boolean"
          },
          "deliveryTechnology" : {
            "type" : "string"
          },
          "profile" : {
            "$ref" : "#/components/schemas/EncodingProfileBody"
          }
        }
      },
      "EncodingProfileBody" : {
        "required" : [ "FileFormat", "Label" ],
        "type" : "object",
        "properties" : {
          "Label" : {
            "type" : "string"
          },
          "FileFormat" : {
            "type" : "string"
          },
          "HLS" : {
            "$ref" : "#/components/schemas/EncodingProfileHLSParameters"
          },
          "Video" : {
            "$ref" : "#/components/schemas/EncodingProfileVideoParameters"
          },
          "Audio" : {
            "$ref" : "#/components/schemas/EncodingProfileAudioParameters"
          },
          "Image" : {
            "$ref" : "#/components/schemas/EncodingProfileImageParameters"
          }
        }
      },
      "EncodingProfileHLSParameters" : {
        "required" : [ "SegmentDuration" ],
        "type" : "object",
        "properties" : {
          "SegmentDuration" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EncodingProfileVideoParameters" : {
        "required" : [ "BitRates", "Codec", "FrameRate", "OtherOutputParameters", "Profile", "TwoPasses" ],
        "type" : "object",
        "properties" : {
          "Codec" : {
            "type" : "string"
          },
          "Profile" : {
            "type" : "string"
          },
          "BitRates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodingProfileVideoParameters_BitRates"
            }
          },
          "TwoPasses" : {
            "type" : "boolean"
          },
          "FrameRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "OtherOutputParameters" : {
            "type" : "string"
          }
        }
      },
      "EncodingProfileAudioParameters" : {
        "required" : [ "BitRates", "ChannelsNumber", "Codec" ],
        "type" : "object",
        "properties" : {
          "Codec" : {
            "type" : "string"
          },
          "ChannelsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "BitRates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodingProfileAudioParameters_BitRates"
            }
          }
        }
      },
      "EncodingProfileImageParameters" : {
        "required" : [ "AspectRatio", "Comment", "Height", "InterlaceType", "Width" ],
        "type" : "object",
        "properties" : {
          "Width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Height" : {
            "type" : "integer",
            "format" : "int32"
          },
          "InterlaceType" : {
            "type" : "string",
            "enum" : [ "NoInterlace", "LineInterlace", "PlaneInterlace", "PartitionInterlace" ]
          },
          "AspectRatio" : {
            "type" : "boolean"
          },
          "Comment" : {
            "type" : "string"
          }
        }
      },
      "EncodingProfilesSet" : {
        "required" : [ "contentType", "encodingProfiles", "encodingProfilesSetKey", "label" ],
        "type" : "object",
        "properties" : {
          "encodingProfilesSetKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "contentType" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          },
          "encodingProfiles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodingProfile"
            }
          }
        }
      },
      "FacebookConf" : {
        "required" : [ "confKey", "label", "pageToken" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "pageToken" : {
            "type" : "string"
          }
        }
      },
      "FTPConf" : {
        "required" : [ "confKey", "label", "password", "port", "remoteDirectory", "server", "userName" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "server" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "userName" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "remoteDirectory" : {
            "type" : "string"
          }
        }
      },
      "IngestionRoot" : {
        "required" : [ "ingestionDate", "ingestionJobs", "ingestionRootKey", "label", "lastUpdate", "status", "userKey", "userName" ],
        "type" : "object",
        "properties" : {
          "ingestionRootKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "ingestionDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "ingestionJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IngestionJob"
            }
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "userKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userName" : {
            "type" : "string"
          }
        }
      },
      "IngestionWorkflowResponse" : {
        "required" : [ "ingestionRootKey", "label" ],
        "type" : "object",
        "properties" : {
          "ingestionRootKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "IngestionTaskResponse" : {
        "required" : [ "ingestionJobKey", "label" ],
        "type" : "object",
        "properties" : {
          "ingestionJobKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "MediaItem" : {
        "required" : [ "contentType", "crossReferences", "deliveryFileName", "endPublishing", "ingester", "ingestionDate", "mediaItemKey", "physicalPaths", "providerName", "retentionInMinutes", "startPublishing", "tags", "title", "uniqueName", "userData" ],
        "type" : "object",
        "properties" : {
          "mediaItemKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          },
          "deliveryFileName" : {
            "type" : "string"
          },
          "ingester" : {
            "type" : "string"
          },
          "userData" : {
            "type" : "object",
            "additionalProperties" : { }
          },
          "ingestionDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "startPublishing" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "endPublishing" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "contentType" : {
            "type" : "string",
            "enum" : [ "Video", "Audio", "Image" ]
          },
          "retentionInMinutes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "providerName" : {
            "type" : "string"
          },
          "uniqueName" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "crossReferences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CrossReference"
            }
          },
          "physicalPaths" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PhysicalPath"
            }
          }
        }
      },
      "PhysicalPath" : {
        "required" : [ "audioTracks", "bitRate", "creationDate", "deliveryTechnology", "durationInMilliSeconds", "encodingProfileKey", "encodingProfileLabel", "externalDeliveryTechnology", "externalDeliveryURL", "externalReadOnlyStorage", "fileFormat", "fileName", "imageDetails", "partitionNumber", "physicalPathKey", "relativePath", "retentionInMinutes", "sizeInBytes", "videoTracks" ],
        "type" : "object",
        "properties" : {
          "physicalPathKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "durationInMilliSeconds" : {
            "type" : "integer",
            "format" : "int64"
          },
          "bitRate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fileFormat" : {
            "type" : "string"
          },
          "partitionNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "relativePath" : {
            "type" : "string"
          },
          "fileName" : {
            "type" : "string"
          },
          "externalReadOnlyStorage" : {
            "type" : "boolean"
          },
          "externalDeliveryURL" : {
            "type" : "string"
          },
          "encodingProfileKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deliveryTechnology" : {
            "type" : "string"
          },
          "encodingProfileLabel" : {
            "type" : "string"
          },
          "sizeInBytes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "retentionInMinutes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "videoTracks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VideoTrack"
            }
          },
          "audioTracks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AudioTrack"
            }
          },
          "imageDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImageDetail"
            }
          },
          "externalDeliveryTechnology" : {
            "type" : "string"
          }
        }
      },
      "SourceSATChannelConf" : {
        "required" : [ "audioEnglishPid", "audioItalianPid", "audioPids", "confKey", "country", "deliverySystem", "frequency", "lnb", "modulation", "name", "networkId", "polarization", "satellite", "serviceId", "symbolRate", "teletextPid", "transportStreamId", "videoPid" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "serviceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "networkId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "transportStreamId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "satellite" : {
            "type" : "string"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lnb" : {
            "type" : "string"
          },
          "videoPid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "audioPids" : {
            "type" : "string"
          },
          "audioItalianPid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "audioEnglishPid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "teletextPid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "modulation" : {
            "type" : "string"
          },
          "polarization" : {
            "type" : "string"
          },
          "symbolRate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "country" : {
            "type" : "string"
          },
          "deliverySystem" : {
            "type" : "string"
          }
        }
      },
      "Support" : {
        "required" : [ "Subject", "Text", "UserEmailAddress" ],
        "type" : "object",
        "properties" : {
          "UserEmailAddress" : {
            "type" : "string",
            "example" : "anthony@companyName.com"
          },
          "Subject" : {
            "type" : "string",
            "example" : "Proxy task does not work"
          },
          "Text" : {
            "type" : "string",
            "example" : "The Proxy task fails woth the following error: ....."
          }
        }
      },
      "User" : {
        "required" : [ "country", "creationDate", "email", "expirationDate", "ldapEnabled", "name", "userKey" ],
        "type" : "object",
        "properties" : {
          "userKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "example" : "Anthony"
          },
          "email" : {
            "type" : "string",
            "example" : "anthony@companyName.com"
          },
          "country" : {
            "type" : "string",
            "example" : "Italy"
          },
          "ldapEnabled" : {
            "type" : "boolean",
            "example" : false
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2031-04-06T20:06:39Z"
          }
        }
      },
      "UserAndWorkspace" : {
        "required" : [ "country", "creationDate", "eMailAddress", "expirationDate", "ldapEnabled", "name", "userKey", "workspace" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Anthony"
          },
          "userKey" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1
          },
          "eMailAddress" : {
            "type" : "string",
            "format" : "email",
            "example" : "anthony@companyName.com"
          },
          "country" : {
            "type" : "string",
            "example" : "Italy"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2031-04-06T20:06:39Z"
          },
          "ldapEnabled" : {
            "type" : "boolean",
            "example" : false
          },
          "workspace" : {
            "$ref" : "#/components/schemas/Workspace"
          }
        }
      },
      "UserAPIKey" : {
        "required" : [ "admin", "apiKey", "applicationRecorder", "cancelIngestionJob", "createProfiles", "createRemoveWorkspace", "default", "deliveryAuthorization", "editConfiguration", "editEncodersPool", "editMedia", "expirationDate", "ingestWorkflow", "killEncoding", "owner", "shareWorkspace" ],
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string",
            "example" : "1j1l1x1p1l1d1q1r1f111w1u1d1p1e1r1q1h1C1j1p1d1l1o111f1r1p1b1b1V111S1b1b14141419131714161518"
          },
          "owner" : {
            "type" : "boolean",
            "example" : true
          },
          "default" : {
            "type" : "boolean",
            "example" : true
          },
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "admin" : {
            "type" : "boolean",
            "example" : true
          },
          "applicationRecorder" : {
            "type" : "boolean",
            "example" : true
          },
          "cancelIngestionJob" : {
            "type" : "boolean",
            "example" : true
          },
          "createProfiles" : {
            "type" : "boolean",
            "example" : true
          },
          "createRemoveWorkspace" : {
            "type" : "boolean",
            "example" : true
          },
          "deliveryAuthorization" : {
            "type" : "boolean",
            "example" : true
          },
          "editConfiguration" : {
            "type" : "boolean",
            "example" : true
          },
          "editEncodersPool" : {
            "type" : "boolean",
            "example" : true
          },
          "editMedia" : {
            "type" : "boolean",
            "example" : true
          },
          "ingestWorkflow" : {
            "type" : "boolean",
            "example" : true
          },
          "killEncoding" : {
            "type" : "boolean",
            "example" : true
          },
          "shareWorkspace" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "UserRegistration" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "anthony@companyName.com"
          },
          "password" : {
            "type" : "string",
            "example" : "19264hd93h"
          },
          "name" : {
            "type" : "string",
            "example" : "Anthony"
          },
          "workspaceName" : {
            "type" : "string",
            "description" : "name of the default Workspace associated to the User. If not provided it is set with the 'Name' of the User if present adn, if not present, it is set with the 'EMail' of the User.",
            "example" : "sport videos"
          },
          "country" : {
            "type" : "string",
            "example" : "Italy"
          }
        }
      },
      "UserUpdate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Anthony"
          },
          "email" : {
            "type" : "string",
            "example" : "anthony@companyName.com"
          },
          "country" : {
            "type" : "string",
            "example" : "Italy"
          },
          "newPassword" : {
            "type" : "string",
            "example" : "19264hd93h"
          },
          "oldPassword" : {
            "type" : "string",
            "example" : "19264hd93h"
          }
        }
      },
      "VideoTrack" : {
        "required" : [ "avgFrameRate", "bitRate", "codecName", "durationInMilliSeconds", "height", "profile", "trackIndex", "videoTrackKey", "width" ],
        "type" : "object",
        "properties" : {
          "videoTrackKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "trackIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "durationInMilliSeconds" : {
            "type" : "integer",
            "format" : "int64"
          },
          "width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "height" : {
            "type" : "integer",
            "format" : "int32"
          },
          "avgFrameRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "codecName" : {
            "type" : "string"
          },
          "bitRate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "profile" : {
            "type" : "string"
          }
        }
      },
      "WorkflowVariable" : {
        "required" : [ "Description", "IsNull", "Position", "Type", "Value" ],
        "type" : "object",
        "properties" : {
          "Description" : {
            "type" : "string",
            "description" : "describe the variable",
            "example" : "Title of the Picture"
          },
          "IsNull" : {
            "type" : "boolean"
          },
          "Position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Type" : {
            "type" : "string",
            "enum" : [ "string", "integer", "decimal", "boolean", "datetime", "datetime-millisecs", "jsonObject", "jsonArray" ]
          },
          "Value" : {
            "type" : "string",
            "description" : "the type of this 'Value' field really depends on the value of the previous 'Type' field"
          }
        }
      },
      "WorkflowTask" : {
        "required" : [ "Label", "Parameters", "Type" ],
        "type" : "object",
        "properties" : {
          "Label" : {
            "type" : "string",
            "description" : "title of the workflow"
          },
          "Type" : {
            "type" : "string",
            "enum" : [ "Add-Content", "Remove-Content", "Encode", "Frame", "Periodical-Frames", "I-Frames", "Motion-JPEG-by-Periodical-Frames", "Motion-JPEG-by-I-Frames", "Slideshow", "Concat-Demuxer", "Cut", "Overlay-Image-On-Video", "Overlay-Text-On-Video", "FTP-Delivery", "HTTP-Callback", "Local-Copy", "Extract-Tracks", "Post-On-Facebook", "Post-On-YouTube", "Face-Recognition", "Face-Identification", "Live-Recorder", "Change-File-Format", "Video-Speed", "Picture-In-Picture", "Live-Proxy", "Live-Cut", "Live-Grid", "Awaiting-The-Beginning", "Intro-Outro-Overlay", "VOD-Proxy", "Email-Notification", "Media-Cross-Reference", "Workflow-As-Library", "Check-Streaming", "GroupOfTasks" ]
          },
          "Parameters" : {
            "type" : "object",
            "additionalProperties" : { }
          }
        }
      },
      "Workflow" : {
        "required" : [ "Label", "Task", "Type", "Variables" ],
        "type" : "object",
        "properties" : {
          "Label" : {
            "type" : "string",
            "description" : "title of the workflow"
          },
          "Type" : {
            "type" : "string",
            "description" : "this is always 'Workflow'"
          },
          "Task" : {
            "$ref" : "#/components/schemas/WorkflowTask"
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/WorkflowVariable"
            }
          }
        }
      },
      "WorkflowLibrary" : {
        "required" : [ "creatorUserKey", "global", "label", "thumbnailMediaItemKey", "variables", "workflowLibraryKey" ],
        "type" : "object",
        "properties" : {
          "workflowLibraryKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "creatorUserKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "global" : {
            "type" : "boolean",
            "example" : true
          },
          "label" : {
            "type" : "string",
            "example" : "Best Picture of the Video"
          },
          "thumbnailMediaItemKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/WorkflowVariable"
            }
          }
        }
      },
      "Workspace" : {
        "required" : [ "creationDate", "encodingPeriod", "isEnabled", "languageCode", "maxEncodingPriority", "maxIngestionsNumber", "maxStorageInMB", "userAPIKey", "workSpaceUsageInMB", "workspaceKey", "workspaceName" ],
        "type" : "object",
        "properties" : {
          "workspaceKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "workspaceName" : {
            "type" : "string"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "isEnabled" : {
            "type" : "boolean",
            "example" : true
          },
          "languageCode" : {
            "type" : "string",
            "example" : "it"
          },
          "maxStorageInMB" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 500000
          },
          "maxEncodingPriority" : {
            "type" : "string",
            "example" : "Low"
          },
          "maxIngestionsNumber" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 20000
          },
          "encodingPeriod" : {
            "type" : "string",
            "example" : "Daily"
          },
          "workSpaceUsageInMB" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userAPIKey" : {
            "$ref" : "#/components/schemas/UserAPIKey"
          }
        }
      },
      "YouTubeConf" : {
        "required" : [ "accessToken", "confKey", "label", "refreshToken", "tokenType" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "tokenType" : {
            "type" : "string",
            "enum" : [ "RefreshToken", "AccessToken" ]
          },
          "refreshToken" : {
            "type" : "string"
          },
          "accessToken" : {
            "type" : "string"
          }
        }
      },
      "inline_response_201" : {
        "required" : [ "confirmationCode", "userKey" ],
        "type" : "object",
        "properties" : {
          "userKey" : {
            "type" : "integer",
            "description" : "please remember his value because it will be the 'user' of the HTTP basic authentication",
            "format" : "int64",
            "example" : 123
          },
          "confirmationCode" : {
            "type" : "string",
            "description" : "please remember his value because it will be used to confirm the registration"
          }
        }
      },
      "inline_response_201_1" : {
        "required" : [ "apiKey" ],
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string",
            "description" : "please remember his value because it will be the 'password' of the HTTP basic authentication"
          }
        }
      },
      "login_body" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "anthony@companyName.com"
          },
          "password" : {
            "type" : "string",
            "example" : "k9wo39lksh"
          },
          "remoteClientIPAddress" : {
            "type" : "string",
            "description" : "in case this field is present, MMS register the client IP | used by the User",
            "example" : "111.222.333.444"
          }
        }
      },
      "inline_response_200" : {
        "required" : [ "status", "version-api" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "version-api" : {
            "type" : "string"
          }
        }
      },
      "workspace_response" : {
        "required" : [ "numFound", "workspaces" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "workspaces" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Workspace"
            }
          }
        }
      },
      "inline_response_200_1" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/workspace_response"
          }
        }
      },
      "workspace_body" : {
        "required" : [ "workspaceName" ],
        "type" : "object",
        "properties" : {
          "workspaceName" : {
            "type" : "string",
            "example" : "news video"
          }
        }
      },
      "inline_response_200_2" : {
        "required" : [ "encoderKey", "workspaceKey" ],
        "type" : "object",
        "properties" : {
          "workspaceKey" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 824
          },
          "encoderKey" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 824
          }
        }
      },
      "inline_response_200_3" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "encoder_response" : {
        "required" : [ "encoders", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "encoders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Encoder"
            }
          }
        }
      },
      "inline_response_200_4" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/encoder_response"
          }
        }
      },
      "encoder_body" : {
        "required" : [ "EncoderKey" ],
        "type" : "object",
        "properties" : {
          "EncoderKey" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "encodersPool_response" : {
        "required" : [ "encoders", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "encoders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodersPool"
            }
          }
        }
      },
      "inline_response_200_5" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/encodersPool_response"
          }
        }
      },
      "encodersPool_body" : {
        "required" : [ "Label", "encoderKeys" ],
        "type" : "object",
        "properties" : {
          "encoderKeys" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "inline_response_201_2" : {
        "required" : [ "EncodersPoolKey" ],
        "type" : "object",
        "properties" : {
          "EncodersPoolKey" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "inline_response_200_6" : {
        "required" : [ "EncodersPoolKey" ],
        "type" : "object",
        "properties" : {
          "EncoderKey" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "workflowAsLibrary_response" : {
        "required" : [ "numFound", "workflowsLibrary" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "workflowsLibrary" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WorkflowLibrary"
            }
          }
        }
      },
      "inline_response_200_7" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/workflowAsLibrary_response"
          }
        }
      },
      "workflow_response" : {
        "required" : [ "numFound", "workflows" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "workflows" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IngestionRoot"
            }
          }
        }
      },
      "inline_response_200_8" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/workflow_response"
          }
        }
      },
      "inline_response_201_3" : {
        "required" : [ "tasks", "workflow" ],
        "type" : "object",
        "properties" : {
          "workflow" : {
            "$ref" : "#/components/schemas/IngestionWorkflowResponse"
          },
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IngestionTaskResponse"
            }
          }
        }
      },
      "ingestionJob_response" : {
        "required" : [ "ingestionJobs", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ingestionJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IngestionJob"
            }
          }
        }
      },
      "inline_response_200_9" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/ingestionJob_response"
          }
        }
      },
      "ingestionJob_ingestionJobKey_body" : {
        "required" : [ "ChannelLabel", "IngestionJobLabel", "IngestionType", "RecordingPeriodEnd", "RecordingPeriodStart", "RecordingVirtualVOD" ],
        "type" : "object",
        "properties" : {
          "IngestionType" : {
            "type" : "string",
            "enum" : [ "Live-Recorder" ]
          },
          "IngestionJobLabel" : {
            "type" : "string"
          },
          "ChannelLabel" : {
            "type" : "string"
          },
          "RecordingPeriodStart" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "RecordingPeriodEnd" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2021-04-08T20:28:33Z"
          },
          "RecordingVirtualVOD" : {
            "type" : "boolean"
          }
        }
      },
      "inline_response_200_10" : {
        "required" : [ "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string"
          }
        }
      },
      "mediaItem_response" : {
        "required" : [ "mediaItems", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mediaItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MediaItem"
            }
          }
        }
      },
      "inline_response_200_11" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/mediaItem_response"
          }
        }
      },
      "mediaItem_body" : {
        "type" : "object",
        "properties" : {
          "tagsIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tagsNotIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "otherMediaItemsKey" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "mediaItem_mediaItemKey_body" : {
        "type" : "object",
        "properties" : {
          "Title" : {
            "type" : "string"
          },
          "UserData" : {
            "type" : "object",
            "additionalProperties" : { }
          },
          "RetentionInMinutes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "UniqueName" : {
            "type" : "string"
          }
        }
      },
      "mediaItemKey_physicalPathKey_body" : {
        "required" : [ "RetentionInMinutes" ],
        "type" : "object",
        "properties" : {
          "RetentionInMinutes" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "tag_response" : {
        "required" : [ "numFound", "tags" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "inline_response_200_12" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/tag_response"
          }
        }
      },
      "encodingJob_response" : {
        "required" : [ "encodingJobs", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "encodingJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodingJob"
            }
          }
        }
      },
      "inline_response_200_13" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/encodingJob_response"
          }
        }
      },
      "encodingJobencodingJobKey_response" : {
        "required" : [ "encodingJobs", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ingestionJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodingJob"
            }
          }
        }
      },
      "inline_response_200_14" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/encodingJobencodingJobKey_response"
          }
        }
      },
      "encodingProfileencodingProfileKey_response" : {
        "required" : [ "encodingProfiles", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "encodingProfiles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodingProfile"
            }
          }
        }
      },
      "inline_response_200_15" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/encodingProfileencodingProfileKey_response"
          }
        }
      },
      "encodingProfilesSetencodingProfilesSetKey_response" : {
        "required" : [ "encodingProfilesSets", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "encodingProfilesSets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EncodingProfilesSet"
            }
          }
        }
      },
      "inline_response_200_16" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/encodingProfilesSetencodingProfilesSetKey_response"
          }
        }
      },
      "encodingProfilesSet_body" : {
        "required" : [ "Label", "Profiles" ],
        "type" : "object",
        "properties" : {
          "Label" : {
            "type" : "string",
            "description" : "label of the encoding profiles set"
          },
          "Profiles" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "label of the encoding profile"
            }
          }
        }
      },
      "encodingProfilesSet_encodingProfilesSet_encodingProfilesSet" : {
        "required" : [ "encodingProfilesSetKey", "label" ],
        "type" : "object",
        "properties" : {
          "encodingProfilesSetKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "encodingProfilesSet_encodingProfilesSet_profiles" : {
        "required" : [ "encodingProfileKey", "label" ],
        "type" : "object",
        "properties" : {
          "encodingProfileKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "encodingProfilesSet_encodingProfilesSet" : {
        "required" : [ "encodingProfilesSet", "profiles" ],
        "type" : "object",
        "properties" : {
          "encodingProfilesSet" : {
            "$ref" : "#/components/schemas/encodingProfilesSet_encodingProfilesSet_encodingProfilesSet"
          },
          "profiles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/encodingProfilesSet_encodingProfilesSet_profiles"
            }
          }
        }
      },
      "inline_response_200_17" : {
        "required" : [ "encodingProfilesSet" ],
        "type" : "object",
        "properties" : {
          "encodingProfilesSet" : {
            "$ref" : "#/components/schemas/encodingProfilesSet_encodingProfilesSet"
          }
        }
      },
      "inline_response_201_4" : {
        "required" : [ "deliveryFileName", "deliveryURL", "maxRetries", "ttlInSeconds" ],
        "type" : "object",
        "properties" : {
          "deliveryURL" : {
            "type" : "string"
          },
          "deliveryFileName" : {
            "type" : "string"
          },
          "ttlInSeconds" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxRetries" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "deliverybulk_uniqueNameList" : {
        "required" : [ "encodingProfileKey", "encodingProfileLabel", "uniqueName" ],
        "type" : "object",
        "properties" : {
          "uniqueName" : {
            "type" : "string"
          },
          "encodingProfileKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "encodingProfileLabel" : {
            "type" : "string"
          }
        }
      },
      "deliverybulk_liveIngestionJobKeyList" : {
        "required" : [ "deliveryCode", "ingestionJobKey" ],
        "type" : "object",
        "properties" : {
          "ingestionJobKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deliveryCode" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "delivery_bulk_body" : {
        "required" : [ "liveIngestionJobKeyList", "uniqueNameList" ],
        "type" : "object",
        "properties" : {
          "uniqueNameList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/deliverybulk_uniqueNameList"
            }
          },
          "liveIngestionJobKeyList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/deliverybulk_liveIngestionJobKeyList"
            }
          }
        }
      },
      "deliverybulk_uniqueNameList_1" : {
        "required" : [ "deliveryURL", "encodingProfileKey", "encodingProfileLabel", "uniqueName" ],
        "type" : "object",
        "properties" : {
          "uniqueName" : {
            "type" : "string"
          },
          "encodingProfileKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "encodingProfileLabel" : {
            "type" : "string"
          },
          "deliveryURL" : {
            "type" : "string"
          }
        }
      },
      "deliverybulk_liveIngestionJobKeyList_1" : {
        "required" : [ "deliveryCode", "deliveryURL", "ingestionJobKey" ],
        "type" : "object",
        "properties" : {
          "ingestionJobKey" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deliveryCode" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deliveryURL" : {
            "type" : "string"
          }
        }
      },
      "inline_response_200_18" : {
        "required" : [ "liveIngestionJobKeyList", "uniqueNameList" ],
        "type" : "object",
        "properties" : {
          "uniqueNameList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/deliverybulk_uniqueNameList_1"
            }
          },
          "liveIngestionJobKeyList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/deliverybulk_liveIngestionJobKeyList_1"
            }
          }
        }
      },
      "confyoutube_response" : {
        "required" : [ "numFound", "youTubeConf" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "youTubeConf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/YouTubeConf"
            }
          }
        }
      },
      "inline_response_200_19" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/confyoutube_response"
          }
        }
      },
      "inline_response_200_20" : {
        "required" : [ "confKey" ],
        "type" : "object",
        "properties" : {
          "confKey" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "conffacebook_response" : {
        "required" : [ "facebookConf", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "facebookConf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FacebookConf"
            }
          }
        }
      },
      "inline_response_200_21" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/conffacebook_response"
          }
        }
      },
      "conf_facebook_body" : {
        "required" : [ "Label", "PageToken" ],
        "type" : "object",
        "properties" : {
          "Label" : {
            "type" : "string"
          },
          "PageToken" : {
            "type" : "string"
          }
        }
      },
      "confchannel_response" : {
        "required" : [ "channelConf", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "channelConf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelConf"
            }
          }
        }
      },
      "inline_response_200_22" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/confchannel_response"
          }
        }
      },
      "confsourceSatChannel_response" : {
        "required" : [ "channelConf", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "channelConf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SourceSATChannelConf"
            }
          }
        }
      },
      "inline_response_200_23" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/confsourceSatChannel_response"
          }
        }
      },
      "confcdncdn77channel_response" : {
        "required" : [ "cdn77Conf", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "channelConf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CDN77Conf"
            }
          }
        }
      },
      "inline_response_200_24" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/confcdncdn77channel_response"
          }
        }
      },
      "confftp_response" : {
        "required" : [ "ftpConf", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ftpConf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FTPConf"
            }
          }
        }
      },
      "inline_response_200_25" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/confftp_response"
          }
        }
      },
      "confemail_response" : {
        "required" : [ "emailConf", "numFound" ],
        "type" : "object",
        "properties" : {
          "numFound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "emailConf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EMailConf"
            }
          }
        }
      },
      "inline_response_200_26" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "response" : {
            "$ref" : "#/components/schemas/confemail_response"
          }
        }
      },
      "EncodingProfileVideoParameters_BitRates" : {
        "required" : [ "Height", "KBitRate", "Width" ],
        "type" : "object",
        "properties" : {
          "Width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Height" : {
            "type" : "integer",
            "format" : "int32"
          },
          "KBitRate" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EncodingProfileAudioParameters_BitRates" : {
        "required" : [ "KBitRate" ],
        "type" : "object",
        "properties" : {
          "KBitRate" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      }
    },
    "securitySchemes" : {
      "BasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}